{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Table of contents # Understanding ORFMap Introduction ORF definition Overlap definition ORF annotation Installation Install Usage Command line examples","title":"Home"},{"location":"index.html#table-of-contents","text":"Understanding ORFMap Introduction ORF definition Overlap definition ORF annotation Installation Install Usage Command line examples","title":"Table of contents"},{"location":"annotation.html","text":"ORF annotation # All ORFs are annotated according to their potential overlapping GFF element(s). Globally, an ORF can be assigned either as a non-coding (nc) sequence or a coding (c) sequence. Non-coding ORF sequences # All GFF elements present in both strands are used to define if an ORF is overlapping or not. Thus, non-coding ORF sequences have three possible feature types: nc_intergenic if the ORF sequence has no overlapping GFF element nc_ovp-element_type if the ORF sequence overlaps with a GFF element in the same strand nc_ovp-element_type-opp if the ORF sequence overlaps with a GFF element in the opposite strand For instance, if an ORF sequence overlaps with a tRNA, the ORF type will be nc_ovp-tRNA . If an ORF sequence overlaps with multiple GFF elements, the one that will be considered to annotate the ORF is the one prioritized according to the following rules: an element on the same strand has the priority over an element on the opposite strand an element with which the ORF sequence overlaps the most has the priority over other elements the element appearing the first in the GFF file has the priority If an ORF sequence overlaps with multiple GFF elements, the ORF type will be assigned according to the overlapping element with wich it overlaps the most. If the ORF overlaps equally with multiple elements, then it will be arbitrarily assigned according to the first element met in the GFF file.","title":"ORF annotation"},{"location":"annotation.html#orf-annotation","text":"All ORFs are annotated according to their potential overlapping GFF element(s). Globally, an ORF can be assigned either as a non-coding (nc) sequence or a coding (c) sequence.","title":"ORF annotation"},{"location":"annotation.html#non-coding-orf-sequences","text":"All GFF elements present in both strands are used to define if an ORF is overlapping or not. Thus, non-coding ORF sequences have three possible feature types: nc_intergenic if the ORF sequence has no overlapping GFF element nc_ovp-element_type if the ORF sequence overlaps with a GFF element in the same strand nc_ovp-element_type-opp if the ORF sequence overlaps with a GFF element in the opposite strand For instance, if an ORF sequence overlaps with a tRNA, the ORF type will be nc_ovp-tRNA . If an ORF sequence overlaps with multiple GFF elements, the one that will be considered to annotate the ORF is the one prioritized according to the following rules: an element on the same strand has the priority over an element on the opposite strand an element with which the ORF sequence overlaps the most has the priority over other elements the element appearing the first in the GFF file has the priority If an ORF sequence overlaps with multiple GFF elements, the ORF type will be assigned according to the overlapping element with wich it overlaps the most. If the ORF overlaps equally with multiple elements, then it will be arbitrarily assigned according to the first element met in the GFF file.","title":"Non-coding ORF sequences"},{"location":"download.html","text":"Download #","title":"Download"},{"location":"download.html#download","text":"","title":"Download"},{"location":"installation.html","text":"Installation # 1. Download and uncompress the latest release archive # Download the latest release # Here: Uncompress the archive # If you downloaded: the .zip file: unzip orfmap-x.x.x.zip the .tar.gz file: tar xzvf orfmap-x.x.x.tar.gz 2. Create an isolated environment # Although not strictly necessary, this step is highly recommended (it will allow you to work on different projects without having any conflicting library versions). Install virtualenv # python3 -m pip install virtualenv Create a virtual environment # virtualenv -p python3 my_env Activate the created environment # source my_env/bin/activate Once activated, any python library you'll install using pip will be installed solely in this isolated environment. Every time you'll need to work with libraries installed in this environment, you'll have to activate it. Once you're done working on your project, simply type deactivate to exit the environment. Note If you're sure you won't need your isolated environment anymore, you could clear it simply by removing the directory: rm -r my_env/ 3. Install ORFMap in your isolated environment # Be sure you're virtual environment is activated, and then follow the procedure described below. Go to the ORFMap directory # cd orfmap-x.x.x/ Install # python setup.py install or pip install . Note If you need to remove the package (for example in order to install a newest version), try: pip uninstall orfmap","title":"Install"},{"location":"installation.html#installation","text":"","title":"Installation"},{"location":"installation.html#1-download-and-uncompress-the-latest-release-archive","text":"","title":"1. Download and uncompress the latest release archive"},{"location":"installation.html#download-the-latest-release","text":"Here:","title":"Download the latest release"},{"location":"installation.html#uncompress-the-archive","text":"If you downloaded: the .zip file: unzip orfmap-x.x.x.zip the .tar.gz file: tar xzvf orfmap-x.x.x.tar.gz","title":"Uncompress the archive"},{"location":"installation.html#2-create-an-isolated-environment","text":"Although not strictly necessary, this step is highly recommended (it will allow you to work on different projects without having any conflicting library versions).","title":"2. Create an isolated environment"},{"location":"installation.html#install-virtualenv","text":"python3 -m pip install virtualenv","title":"Install virtualenv"},{"location":"installation.html#create-a-virtual-environment","text":"virtualenv -p python3 my_env","title":"Create a virtual environment"},{"location":"installation.html#activate-the-created-environment","text":"source my_env/bin/activate Once activated, any python library you'll install using pip will be installed solely in this isolated environment. Every time you'll need to work with libraries installed in this environment, you'll have to activate it. Once you're done working on your project, simply type deactivate to exit the environment. Note If you're sure you won't need your isolated environment anymore, you could clear it simply by removing the directory: rm -r my_env/","title":"Activate the created environment"},{"location":"installation.html#3-install-orfmap-in-your-isolated-environment","text":"Be sure you're virtual environment is activated, and then follow the procedure described below.","title":"3. Install ORFMap in your isolated environment"},{"location":"installation.html#go-to-the-orfmap-directory","text":"cd orfmap-x.x.x/","title":"Go to the ORFMap directory"},{"location":"installation.html#install","text":"python setup.py install or pip install . Note If you need to remove the package (for example in order to install a newest version), try: pip uninstall orfmap","title":"Install"},{"location":"introduction.html","text":"Introduction # ORFMap is an open-source tool that exhaustively scans a given genome to find and annotate all its potential ORFs. The program returns a GFF and a fasta file for all desired ORFs.","title":"Introduction"},{"location":"introduction.html#introduction","text":"ORFMap is an open-source tool that exhaustively scans a given genome to find and annotate all its potential ORFs. The program returns a GFF and a fasta file for all desired ORFs.","title":"Introduction"},{"location":"orf_def.html","text":"ORF defintion # ORFMap searches all potential ORFs for a given genome. To do so, an ORF has been defined according to its most general definition (https://doi.org/10.1016/j.tig.2017.12.009). An ORF sequence: has a length divisible by 3 is bounded by stop codons is at least 60 nucleotides long (stop codons included)","title":"ORF definition"},{"location":"orf_def.html#orf-defintion","text":"ORFMap searches all potential ORFs for a given genome. To do so, an ORF has been defined according to its most general definition (https://doi.org/10.1016/j.tig.2017.12.009). An ORF sequence: has a length divisible by 3 is bounded by stop codons is at least 60 nucleotides long (stop codons included)","title":"ORF defintion"},{"location":"overlap.html","text":"Overlap defintion # All ORFs sequences are annotated according to the element(s) they could overlap with. The overlap definition is as follow: If at least 70 % of an ORF sequence overlaps with a GFF element, then the ORF is considered as overlapping with this element. If less than 70 % of an ORF sequence overlaps with a GFF element, but this element is totally included in the ORF sequence, then the ORF is considered as overlapping with the element.","title":"Overlap definition"},{"location":"overlap.html#overlap-defintion","text":"All ORFs sequences are annotated according to the element(s) they could overlap with. The overlap definition is as follow: If at least 70 % of an ORF sequence overlaps with a GFF element, then the ORF is considered as overlapping with this element. If less than 70 % of an ORF sequence overlaps with a GFF element, but this element is totally included in the ORF sequence, then the ORF is considered as overlapping with the element.","title":"Overlap defintion"},{"location":"usage.html","text":"Usage #","title":"Command line examples"},{"location":"usage.html#usage","text":"","title":"Usage"},{"location":"virtualenv.html","text":"Virtual environment #","title":"Virtualenv"},{"location":"virtualenv.html#virtual-environment","text":"","title":"Virtual environment"}]}