{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Table of contents # Understanding ORFMap Introduction ORF definition Overlap definition ORF annotation Installation Install Usage Command line examples","title":"ORFold"},{"location":"index.html#table-of-contents","text":"Understanding ORFMap Introduction ORF definition Overlap definition ORF annotation Installation Install Usage Command line examples","title":"Table of contents"},{"location":"download.html","text":"Download #","title":"Download"},{"location":"download.html#download","text":"","title":"Download"},{"location":"index_orfmap.html","text":"Table of contents # Understanding ORFMap Introduction ORF definition Overlap definition ORF annotation Installation Install Usage Command line examples","title":"Index orfmap"},{"location":"index_orfmap.html#table-of-contents","text":"Understanding ORFMap Introduction ORF definition Overlap definition ORF annotation Installation Install Usage Command line examples","title":"Table of contents"},{"location":"index_orfmine.html","text":"Table of contents # Understanding ORFMap Introduction ORF definition Overlap definition ORF annotation Installation Install Usage Command line examples","title":"Index orfmine"},{"location":"index_orfmine.html#table-of-contents","text":"Understanding ORFMap Introduction ORF definition Overlap definition ORF annotation Installation Install Usage Command line examples","title":"Table of contents"},{"location":"index_ori.html","text":"ORFmine # For full documentation visit mkdocs.org . Commands # mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout # mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"ORFmine"},{"location":"index_ori.html#orfmine","text":"For full documentation visit mkdocs.org .","title":"ORFmine"},{"location":"index_ori.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"index_ori.html#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"orfget_param.html","text":"","title":"ORFget parameters"},{"location":"orfget_run.html","text":"Extraction and writing of ORF sequences with ORFget # ORFget is a tool provided with ORFmap that allows the user to extract the protein or nulceotide sequences of specific subsets of ORFs according to their annotation categories. ORFget deals with regular expressions, thereby allowing different levels of annotation in a very easy fashion. Here are presented some examples of selection of ORFs with ORFget. Extraction of the sequences of all the ORFs of a GFF file # The following command writes the protein sequences of all ORFs annotated in the input GFF file. orfget ALL SEQUENCES PROT ORFget generates a FASTA file containing all the corresponding protein sequences. Extraction of the sequences of all noncoding ORFs identified with ORFmap # The following two commands, each enable the user to write the protein sequences of all noncoding ORFs no matter their status (i.e. intergenic or overlapping) (see here for a description of all ORF categories). orfget include intergenic + nc_same_ovp + nc_opp_ovp or orfget exclude c_CDS Extraction of the sequences of a specific subset of ORFs according to their annotation # The following instruction writes the protein sequences of the ORFs which overlap with CDS on the same, or on the opposite strand. orfget include nc_same_ovp_CDS + nc_opp_ovp_CDS Notice that using the argument \"exclude\" assumes that the selection operates on all genomic features except those that are excluded. Consequently, if the user wants to select all noncoding sequences except those overlapping CDS, mRNAs, tRNAs, and rRNAs, he must exclude the coding ORFs (c_CDS) as well. Otherwise, they will be kept. orfget exclude C_CDS nc_same_ovp_tRNA + nc_same_ovp_rRNA +nc_opp_ovp_mRNA + C_CDS nc_opp_ovp_tRNA + nc_opp_ovp_rRNA +nc_opp_ovp_mRNA Extraction of the sequences of a random subset of ORFs # Sometimes, for computational time or storage reasons, the user does not want to deal with all the ORFs of a specific category. ORFget can provide the user with a subset of N (to be defined by the user) randomly selected ORFs from a specific ORF category. The last instruction writes the sequences of 10000 randomly selected noncoding intergenic ORFs. orfget 10000 intergenic ORFs Reconstruction of protein sequences # In addition, ORFget enables the reconstruction of all protein sequences of a genome (i.e. all isoforms) according to their definition in the original GFF file. The following instruction writes all the resulting sequences in a FASTA file. orfget build CDS","title":"ORF extraction with ORFget"},{"location":"orfget_run.html#extraction-and-writing-of-orf-sequences-with-orfget","text":"ORFget is a tool provided with ORFmap that allows the user to extract the protein or nulceotide sequences of specific subsets of ORFs according to their annotation categories. ORFget deals with regular expressions, thereby allowing different levels of annotation in a very easy fashion. Here are presented some examples of selection of ORFs with ORFget.","title":"Extraction and writing of ORF sequences with ORFget"},{"location":"orfget_run.html#extraction-of-the-sequences-of-all-the-orfs-of-a-gff-file","text":"The following command writes the protein sequences of all ORFs annotated in the input GFF file. orfget ALL SEQUENCES PROT ORFget generates a FASTA file containing all the corresponding protein sequences.","title":"Extraction of the sequences of all the ORFs of a GFF file"},{"location":"orfget_run.html#extraction-of-the-sequences-of-all-noncoding-orfs-identified-with-orfmap","text":"The following two commands, each enable the user to write the protein sequences of all noncoding ORFs no matter their status (i.e. intergenic or overlapping) (see here for a description of all ORF categories). orfget include intergenic + nc_same_ovp + nc_opp_ovp or orfget exclude c_CDS","title":"Extraction of the sequences of all noncoding ORFs identified with ORFmap"},{"location":"orfget_run.html#extraction-of-the-sequences-of-a-specific-subset-of-orfs-according-to-their-annotation","text":"The following instruction writes the protein sequences of the ORFs which overlap with CDS on the same, or on the opposite strand. orfget include nc_same_ovp_CDS + nc_opp_ovp_CDS Notice that using the argument \"exclude\" assumes that the selection operates on all genomic features except those that are excluded. Consequently, if the user wants to select all noncoding sequences except those overlapping CDS, mRNAs, tRNAs, and rRNAs, he must exclude the coding ORFs (c_CDS) as well. Otherwise, they will be kept. orfget exclude C_CDS nc_same_ovp_tRNA + nc_same_ovp_rRNA +nc_opp_ovp_mRNA + C_CDS nc_opp_ovp_tRNA + nc_opp_ovp_rRNA +nc_opp_ovp_mRNA","title":"Extraction of the sequences of a specific subset of ORFs according to their annotation"},{"location":"orfget_run.html#extraction-of-the-sequences-of-a-random-subset-of-orfs","text":"Sometimes, for computational time or storage reasons, the user does not want to deal with all the ORFs of a specific category. ORFget can provide the user with a subset of N (to be defined by the user) randomly selected ORFs from a specific ORF category. The last instruction writes the sequences of 10000 randomly selected noncoding intergenic ORFs. orfget 10000 intergenic ORFs","title":"Extraction of the sequences of a random subset of ORFs"},{"location":"orfget_run.html#reconstruction-of-protein-sequences","text":"In addition, ORFget enables the reconstruction of all protein sequences of a genome (i.e. all isoforms) according to their definition in the original GFF file. The following instruction writes all the resulting sequences in a FASTA file. orfget build CDS","title":"Reconstruction of protein sequences"},{"location":"orfmap_annotation.html","text":"ORF annotation # The ORF annotation relies on the comparison of their localization with those of all the genomic features annotated in the input GFF file (e.g. coding sequences (CDS), tRNA, lncRNA, snoRNA, pseudogenes...). ORFs are subsequently assigned as coding (c_CDS) (if it includes in the same frame a CDS or an exon for multiexonic genes) or noncoding (nc). Noncoding ORFs are then subdivided into noncoding intergenic ORFs (nc_intergenic) or noncoding overlapping ORFs (nc_ovlp_x with x refering to the overlapping genomic feature) (see here for the definition of an overlap). The former correspond to ORFs which do not overlap with any genomic feature. The latter consist of ORFs which overlap with a non-phased genomic feature (i.e. non coding) on the same or the opposite strand or which overlap with a CDS or an exon in another frame. Depending on the localization of the overlapping feature (same or opposite strand), the ORFs are annotated as nc_same_ovlp_x or nc_opp_ovlp_x respectively. Notice that the ORFmap annotation adopts/has a particular point of view on the genome which is centered on the identification and annotation of a genome's ORFs rather than the annotation of real biological objets (e.g. tRNA, rRNA or lncRNA for example). ORFmap looks at the genome with a protein perspective where the ORFs of a genome can be seen as its potential for novel peptides or proteins upon the pervasive translation of their corresponding RNAs. Annotation rules # ORF categories # ORFs can be annotated according to four different categories: (1) c_CDS ORFs which include in the same frame a CDS or an exon for multiexonic genes (2) nc_intergenic ORFs which do not overlap any genomic feature (3) nc_same_ovlp_x ORFs which overlap on the same strand, with a genetic feature no matter its type (4) nc_opp_ovlp_x ORFs which overlap on the opposite strand, with a genetic feature no matter its type See examples of each type in Figure 1. Figure 1: representation of the six frames of a DNA section. STOP codons are represented with red stars, CDS with orange rectangles and the localization of the non-phased genomic features (e.g. tRNA, lncRNA) are represented with green boxes. Note Notice, that a noncoding ORF which overlaps with a tRNA is not considered as a tRNA and will not be annotated as tRNA, but rather as an ORF that overlaps with a tRNA. Indeed a tRNA is a RNA molecule that does not follow the ORF definition (not bounded by STOP codons, whose sequence length is not necessarily a multiple of 3...). Here ORFs are seen as potential peptides/proteins that could be produced upon the pervasive translation of their corresponding RNA. Annotating all ORFs with the genomic feature they overlap with enables their analysis in a very flexible fashion. Indeed, the user can adopt different levels of annotation, considering all noncoding ORFs as a whole (regardless of the fact they overlap with a genmic feature or not) or differentiating noncoding ORFs from noncoding ORFs that overlap with specific genmic feature (e.g. tRNA and rRNA) (see the ORFget section for more details). Priority rules # If a noncoding ORF overlaps with multiple genomic features, it will be annotated according to the following priority rules: if the noncoding ORF overlaps with a CDS and another annotated feature, the CDS has priority over the other annotated features no matter the CDS is located on the same or the opposite strand. The ORF will be annotated as a noncoding ORF overlapping with a CDS (e.g. nc_(same/opp)_ovp_CDS). if the noncoding ORF overlaps with an annotated feature on the same strand and another annotated feature on the opposite strand (except CDS), the annotated feature located on the same strand has priority over the other features on the opposite strand. The ORF will be annotated as a noncoding ORF overlapping with the feature on the same strand (e.g. nc_ovlp_same_x). if the noncoding ORF overlaps with multiple annotated features located on the same strand, the feature with the larger overlap with the ORF to be annotated has priority over the other features (e.g. nc_ovlp_(same/opp)_x). if the noncoding ORF overlaps with multiple features located on the same strand and that cover the same fraction of the ORF to be annotated, the feature which first appears in the GFF file has priority over the others. This case occurs with large annotated features that embed smaller elements. Particular case of genes and exons. Notice that many genomic features overlap together or can be intertwined with each other (e.g. a gene includes one or several mRNAs which in turn include exons and CDS). By default, the features \"gene\" and \"exon\" are not considered. ORFs that match at the same time the features \"gene\" and \"mRNA\" are annotated as nc_same/opp_ovp_mRNA (see Figure 2), while those that match a CDS and its corresponding exon, will be annotated as c_CDS (i.e. coding ORFs). Finally, noncoding ORFs that overlap in another frame with a CDS, and an exon will be annotated as nc_same/opp_ovp_CDS. Figure 2: representation of the three frames of a DNA strand section containing a protein coding gene. STOP codons are represented with red stars, the two CDS of the multiexonic gene with orange rectangles, while the protein coding gene and its corresponding mRNA are represented with light and dark grey boxes respectively. The two ORFs indicated with brackets do not overlap with the CDS of the gene are subsequently annotated as noncoding. However, they overlap with the gene and its corresponding mRNA. As the mRNA has priority over the gene feature, the two ORFs are annotated as noncoding ORF overlapping with a mRNA (nc_same_ovp_mRNA).","title":"ORF annotation"},{"location":"orfmap_annotation.html#orf-annotation","text":"The ORF annotation relies on the comparison of their localization with those of all the genomic features annotated in the input GFF file (e.g. coding sequences (CDS), tRNA, lncRNA, snoRNA, pseudogenes...). ORFs are subsequently assigned as coding (c_CDS) (if it includes in the same frame a CDS or an exon for multiexonic genes) or noncoding (nc). Noncoding ORFs are then subdivided into noncoding intergenic ORFs (nc_intergenic) or noncoding overlapping ORFs (nc_ovlp_x with x refering to the overlapping genomic feature) (see here for the definition of an overlap). The former correspond to ORFs which do not overlap with any genomic feature. The latter consist of ORFs which overlap with a non-phased genomic feature (i.e. non coding) on the same or the opposite strand or which overlap with a CDS or an exon in another frame. Depending on the localization of the overlapping feature (same or opposite strand), the ORFs are annotated as nc_same_ovlp_x or nc_opp_ovlp_x respectively. Notice that the ORFmap annotation adopts/has a particular point of view on the genome which is centered on the identification and annotation of a genome's ORFs rather than the annotation of real biological objets (e.g. tRNA, rRNA or lncRNA for example). ORFmap looks at the genome with a protein perspective where the ORFs of a genome can be seen as its potential for novel peptides or proteins upon the pervasive translation of their corresponding RNAs.","title":"ORF annotation"},{"location":"orfmap_annotation.html#annotation-rules","text":"","title":"Annotation rules"},{"location":"orfmap_annotation.html#orf-categories","text":"ORFs can be annotated according to four different categories: (1) c_CDS ORFs which include in the same frame a CDS or an exon for multiexonic genes (2) nc_intergenic ORFs which do not overlap any genomic feature (3) nc_same_ovlp_x ORFs which overlap on the same strand, with a genetic feature no matter its type (4) nc_opp_ovlp_x ORFs which overlap on the opposite strand, with a genetic feature no matter its type See examples of each type in Figure 1. Figure 1: representation of the six frames of a DNA section. STOP codons are represented with red stars, CDS with orange rectangles and the localization of the non-phased genomic features (e.g. tRNA, lncRNA) are represented with green boxes. Note Notice, that a noncoding ORF which overlaps with a tRNA is not considered as a tRNA and will not be annotated as tRNA, but rather as an ORF that overlaps with a tRNA. Indeed a tRNA is a RNA molecule that does not follow the ORF definition (not bounded by STOP codons, whose sequence length is not necessarily a multiple of 3...). Here ORFs are seen as potential peptides/proteins that could be produced upon the pervasive translation of their corresponding RNA. Annotating all ORFs with the genomic feature they overlap with enables their analysis in a very flexible fashion. Indeed, the user can adopt different levels of annotation, considering all noncoding ORFs as a whole (regardless of the fact they overlap with a genmic feature or not) or differentiating noncoding ORFs from noncoding ORFs that overlap with specific genmic feature (e.g. tRNA and rRNA) (see the ORFget section for more details).","title":"ORF categories"},{"location":"orfmap_annotation.html#priority-rules","text":"If a noncoding ORF overlaps with multiple genomic features, it will be annotated according to the following priority rules: if the noncoding ORF overlaps with a CDS and another annotated feature, the CDS has priority over the other annotated features no matter the CDS is located on the same or the opposite strand. The ORF will be annotated as a noncoding ORF overlapping with a CDS (e.g. nc_(same/opp)_ovp_CDS). if the noncoding ORF overlaps with an annotated feature on the same strand and another annotated feature on the opposite strand (except CDS), the annotated feature located on the same strand has priority over the other features on the opposite strand. The ORF will be annotated as a noncoding ORF overlapping with the feature on the same strand (e.g. nc_ovlp_same_x). if the noncoding ORF overlaps with multiple annotated features located on the same strand, the feature with the larger overlap with the ORF to be annotated has priority over the other features (e.g. nc_ovlp_(same/opp)_x). if the noncoding ORF overlaps with multiple features located on the same strand and that cover the same fraction of the ORF to be annotated, the feature which first appears in the GFF file has priority over the others. This case occurs with large annotated features that embed smaller elements. Particular case of genes and exons. Notice that many genomic features overlap together or can be intertwined with each other (e.g. a gene includes one or several mRNAs which in turn include exons and CDS). By default, the features \"gene\" and \"exon\" are not considered. ORFs that match at the same time the features \"gene\" and \"mRNA\" are annotated as nc_same/opp_ovp_mRNA (see Figure 2), while those that match a CDS and its corresponding exon, will be annotated as c_CDS (i.e. coding ORFs). Finally, noncoding ORFs that overlap in another frame with a CDS, and an exon will be annotated as nc_same/opp_ovp_CDS. Figure 2: representation of the three frames of a DNA strand section containing a protein coding gene. STOP codons are represented with red stars, the two CDS of the multiexonic gene with orange rectangles, while the protein coding gene and its corresponding mRNA are represented with light and dark grey boxes respectively. The two ORFs indicated with brackets do not overlap with the CDS of the gene are subsequently annotated as noncoding. However, they overlap with the gene and its corresponding mRNA. As the mRNA has priority over the gene feature, the two ORFs are annotated as noncoding ORF overlapping with a mRNA (nc_same_ovp_mRNA).","title":"Priority rules"},{"location":"orfmap_description.html","text":"Aims and general description # ORFMap scans a given genome in the six frames, and searches for all possible ORFs longer than a given size (default: 60 nucleotides including the 3' STOP codon). It annotates them according to a set of genomic features (e.g. noncoding intergenic, coding, noncoding and overlapping with a specific genomic feature - see the ORF annotation section for more details. ORFmap takes as inputs a FASTA file containing the nucleotide sequences of all chromosomes or contigs and their corresponding annotations in a GFF file. The program returns a new GFF file that contains all identified ORFs. In addition, the amino acid sequences of all annotated ORFs or specific subsets of ORFs (i.e. only noncoding intergenic ORFs for example) can be extracted and written in a FASTA file with ORFget, a tool provided with ORFmap.","title":"Aims and general description"},{"location":"orfmap_description.html#aims-and-general-description","text":"ORFMap scans a given genome in the six frames, and searches for all possible ORFs longer than a given size (default: 60 nucleotides including the 3' STOP codon). It annotates them according to a set of genomic features (e.g. noncoding intergenic, coding, noncoding and overlapping with a specific genomic feature - see the ORF annotation section for more details. ORFmap takes as inputs a FASTA file containing the nucleotide sequences of all chromosomes or contigs and their corresponding annotations in a GFF file. The program returns a new GFF file that contains all identified ORFs. In addition, the amino acid sequences of all annotated ORFs or specific subsets of ORFs (i.e. only noncoding intergenic ORFs for example) can be extracted and written in a FASTA file with ORFget, a tool provided with ORFmap.","title":"Aims and general description"},{"location":"orfmap_input.html","text":"ORFmap inputs # ORFmap takes as inputs: a FASTA file containing the nucleotide sequences of the chromosomes or contigs of a genome the genome annotation in a GFF file (see the GFF3 documentation for more details on the GFF3 format). See an example of inputs in the ORFmine/examples/ directory.","title":"Inputs"},{"location":"orfmap_input.html#orfmap-inputs","text":"ORFmap takes as inputs: a FASTA file containing the nucleotide sequences of the chromosomes or contigs of a genome the genome annotation in a GFF file (see the GFF3 documentation for more details on the GFF3 format). See an example of inputs in the ORFmine/examples/ directory.","title":"ORFmap inputs"},{"location":"orfmap_orf_extraction.html","text":"ORF extraction # The amino acid and nucleotide sequences of all ORFs identified with ORFmap can be extracted easily with ORFget, a tool provided with ORFmap. Particularly, ORFget enables the user to extract the sequences of all identified ORFs (c_CDS, noncoding intergenic, or noncoding overlapping ORFs), but also, those of a specific ORF category (e.g. only noncoding intergenic ORFs) or a combination of ORFs according to their annotations (e.g. noncoding intergenic ORFs and noncoding ORFs that overlap with lncRNAs). Different examples are detailed in the ORFget section .","title":"ORF extraction"},{"location":"orfmap_orf_extraction.html#orf-extraction","text":"The amino acid and nucleotide sequences of all ORFs identified with ORFmap can be extracted easily with ORFget, a tool provided with ORFmap. Particularly, ORFget enables the user to extract the sequences of all identified ORFs (c_CDS, noncoding intergenic, or noncoding overlapping ORFs), but also, those of a specific ORF category (e.g. only noncoding intergenic ORFs) or a combination of ORFs according to their annotations (e.g. noncoding intergenic ORFs and noncoding ORFs that overlap with lncRNAs). Different examples are detailed in the ORFget section .","title":"ORF extraction"},{"location":"orfmap_orfdef.html","text":"ORF defintion # ORFs are defined according to the recent definition proposed by Sieber et al, in 2018. An ORF: has a length divisible by 3 is bounded by stop codons is at least 60 nucleotides long (3' STOP codon included) The minimal length of an ORF can be nevertheless modified by the user with the XXXX parameter (notice that the ORF length includes the 3' STOP codon). The following instruction extracts all ORFs of at least 100 amino acids: orfold xxxx -ORF_length 303","title":"ORF definition"},{"location":"orfmap_orfdef.html#orf-defintion","text":"ORFs are defined according to the recent definition proposed by Sieber et al, in 2018. An ORF: has a length divisible by 3 is bounded by stop codons is at least 60 nucleotides long (3' STOP codon included) The minimal length of an ORF can be nevertheless modified by the user with the XXXX parameter (notice that the ORF length includes the 3' STOP codon). The following instruction extracts all ORFs of at least 100 amino acids: orfold xxxx -ORF_length 303","title":"ORF defintion"},{"location":"orfmap_overlap.html","text":"Overlap definition # Calculation of the overlap: An ORF is considered as overlapping with a given genomic feature if the latter covers at least 70 % of the ORF sequence. If less than 70 % of an ORF sequence overlaps with a genomic feature, but the latter is totally included in the ORF sequence, then the ORF is also considered as overlapping with it. Notice that the overlap threshold can be modified with the XXXX parameter. With the following instruction, an ORF is annotated as overlapping with a given genomic feature if the latter covers at least 90% of the considered ORF. orfold xxxx -OVLP 90%","title":"Overlap definition"},{"location":"orfmap_overlap.html#overlap-definition","text":"Calculation of the overlap: An ORF is considered as overlapping with a given genomic feature if the latter covers at least 70 % of the ORF sequence. If less than 70 % of an ORF sequence overlaps with a genomic feature, but the latter is totally included in the ORF sequence, then the ORF is also considered as overlapping with it. Notice that the overlap threshold can be modified with the XXXX parameter. With the following instruction, an ORF is annotated as overlapping with a given genomic feature if the latter covers at least 90% of the considered ORF. orfold xxxx -OVLP 90%","title":"Overlap definition"},{"location":"orfmap_param.html","text":"","title":"ORFmap parameters"},{"location":"orfmap_run.html","text":"Annotation of ORFs with ORFmap # Running ORFmap on a complete genome # The following instruction annotates all the possible ORFs of the input genome. orfmap orfmap -fna genome.fasta -gff genome.gff Depending on the size of the genome, ORFmap takes a few minutes to several hours to annotate all the ORFs of a genome. It returns a new GFF file containing the annotation of all the identified ORFs (including coding and noncoding ORFs). Running ORFmap on a single chromosome or a subset of chromosomes # ORFmap can be launched on a single chromosome with the following instruction: orfmap orfmap -fna genome.fasta -gff genome.gff CHR XXXXX This can be very useful if the user wants to run ORFmap on several CPUs. Also, it can be launched on a subset of chromosomes as follows: orfmap orfmap -fna genome.fasta -gff genome.gff CHR1 CHR2 CHR3","title":"ORF annotation with ORFmap"},{"location":"orfmap_run.html#annotation-of-orfs-with-orfmap","text":"","title":"Annotation of ORFs with ORFmap"},{"location":"orfmap_run.html#running-orfmap-on-a-complete-genome","text":"The following instruction annotates all the possible ORFs of the input genome. orfmap orfmap -fna genome.fasta -gff genome.gff Depending on the size of the genome, ORFmap takes a few minutes to several hours to annotate all the ORFs of a genome. It returns a new GFF file containing the annotation of all the identified ORFs (including coding and noncoding ORFs).","title":"Running ORFmap on a complete genome"},{"location":"orfmap_run.html#running-orfmap-on-a-single-chromosome-or-a-subset-of-chromosomes","text":"ORFmap can be launched on a single chromosome with the following instruction: orfmap orfmap -fna genome.fasta -gff genome.gff CHR XXXXX This can be very useful if the user wants to run ORFmap on several CPUs. Also, it can be launched on a subset of chromosomes as follows: orfmap orfmap -fna genome.fasta -gff genome.gff CHR1 CHR2 CHR3","title":"Running ORFmap on a single chromosome or a subset of chromosomes"},{"location":"orfmine_installation.html","text":"Installation # 1. Overview # ORFmine is a package that consists of two independent programs ORFmap and ORFold. The setup.py program will install both ORFmap and ORFold. They can be used together or independently. If you are not interested in the calculation of the disorder and/or aggregation propensities with ORFold, you do not need to install further dependencies and simply have to follow the installation instructions presented here (xxxx). Otherwise, you need first to download IUPRED[REF] and TANGO[REF] at xxx and yyyy respectively. Then xxxxx Then follow the installation instructions presented here (xxxx) 2. Download and uncompress the latest release archive # Download the latest release # Here: Uncompress the archive # If you downloaded: the .zip file: unzip orfmine-x.x.x.zip the .tar.gz file: tar xzvf orfmine-x.x.x.tar.gz 3. Create an isolated environment # Although not strictly necessary, this step is highly recommended (it will allow you to work on different projects without having any conflicting library versions). Install virtualenv # python3 -m pip install virtualenv Create a virtual environment # virtualenv -p python3 my_env Activate the created environment # source my_env/bin/activate Once activated, any python library you will install using pip will be installed solely in this isolated environment. You must activate this environment very time you need libraries installed in this environment. Once you are done working on your project, simply type deactivate to exit the environment. Note To delete definitively your virutal environment, you can simply remove the directory with the following instruction: rm -r my_env/ 4. Install ORFMine in your isolated environment # Be sure your virtual environment is activated, and then follow the procedure described below. Go to the ORFMap directory # cd orfmap-x.x.x/ Install # python setup.py install or pip install . Note If you need to remove the package (for example in order to install a newest version), try: pip uninstall orfmap","title":"Installation"},{"location":"orfmine_installation.html#installation","text":"","title":"Installation"},{"location":"orfmine_installation.html#1-overview","text":"ORFmine is a package that consists of two independent programs ORFmap and ORFold. The setup.py program will install both ORFmap and ORFold. They can be used together or independently. If you are not interested in the calculation of the disorder and/or aggregation propensities with ORFold, you do not need to install further dependencies and simply have to follow the installation instructions presented here (xxxx). Otherwise, you need first to download IUPRED[REF] and TANGO[REF] at xxx and yyyy respectively. Then xxxxx Then follow the installation instructions presented here (xxxx)","title":"1. Overview"},{"location":"orfmine_installation.html#2-download-and-uncompress-the-latest-release-archive","text":"","title":"2. Download and uncompress the latest release archive"},{"location":"orfmine_installation.html#download-the-latest-release","text":"Here:","title":"Download the latest release"},{"location":"orfmine_installation.html#uncompress-the-archive","text":"If you downloaded: the .zip file: unzip orfmine-x.x.x.zip the .tar.gz file: tar xzvf orfmine-x.x.x.tar.gz","title":"Uncompress the archive"},{"location":"orfmine_installation.html#3-create-an-isolated-environment","text":"Although not strictly necessary, this step is highly recommended (it will allow you to work on different projects without having any conflicting library versions).","title":"3. Create an isolated environment"},{"location":"orfmine_installation.html#install-virtualenv","text":"python3 -m pip install virtualenv","title":"Install virtualenv"},{"location":"orfmine_installation.html#create-a-virtual-environment","text":"virtualenv -p python3 my_env","title":"Create a virtual environment"},{"location":"orfmine_installation.html#activate-the-created-environment","text":"source my_env/bin/activate Once activated, any python library you will install using pip will be installed solely in this isolated environment. You must activate this environment very time you need libraries installed in this environment. Once you are done working on your project, simply type deactivate to exit the environment. Note To delete definitively your virutal environment, you can simply remove the directory with the following instruction: rm -r my_env/","title":"Activate the created environment"},{"location":"orfmine_installation.html#4-install-orfmine-in-your-isolated-environment","text":"Be sure your virtual environment is activated, and then follow the procedure described below.","title":"4. Install ORFMine in your isolated environment"},{"location":"orfmine_installation.html#go-to-the-orfmap-directory","text":"cd orfmap-x.x.x/","title":"Go to the ORFMap directory"},{"location":"orfmine_installation.html#install","text":"python setup.py install or pip install . Note If you need to remove the package (for example in order to install a newest version), try: pip uninstall orfmap","title":"Install"},{"location":"orfmine_overview.html","text":"Overview of ORFmine # Recent studies attribute a new role to the noncoding genome in the production of novel peptides. The widespread transcription of noncoding regions and the pervasive translation of the resulting RNAs offer a vast reservoir of novel peptides to the organisms. ORFmine is an open-source package that aims at extracting, annotating, and characterizing the fold potential and the structural properties of all Open Reading Frames (ORF) encoded in a genome (including coding and noncoding sequences). ORFmine consists of two independent programs, ORFmap and ORFold that can be used together or independently (see here for an example of application). ORFMap searches for all possible ORFs in the six frames of an input genome, and annotate them according to a set of genomic features (e.g. noncoding intergenic ORFs, coding ORFs, noncoding ORFs that overlap with a specific genomic feature...). It provides the user with a GFF file containing the annotations of all identified ORFs that can be directly uploaded on a genome viewer for a visual inspection. In addition, their amino acid and/or nucleotide sequences can be extracted in a FASTA file (for more details, see the complete documentation of ORFmap). ORFold probes the fold potential and the disorder and aggregation propensities of a set of amino acid sequences. The fold potential is estimated with the HCA method [REF], while the disorder and aggregation propensities are calculated with IUPRred, and TANGO respectively [REFiupred REFtango]. The specificity of ORFold lies in the fact that the user can provide the amino acid sequences along with their corresponding annotations in a GFF file. In this case, ORFold produces new GFF files, each containing for each annotated sequence, their fold potential, disorder and aggregation propensities respectively, thereby enabling the manual inspection of these properties for all genomic features in a genome viewer (for more details, see the complete documentation of ORFold).","title":"Overview"},{"location":"orfmine_overview.html#overview-of-orfmine","text":"Recent studies attribute a new role to the noncoding genome in the production of novel peptides. The widespread transcription of noncoding regions and the pervasive translation of the resulting RNAs offer a vast reservoir of novel peptides to the organisms. ORFmine is an open-source package that aims at extracting, annotating, and characterizing the fold potential and the structural properties of all Open Reading Frames (ORF) encoded in a genome (including coding and noncoding sequences). ORFmine consists of two independent programs, ORFmap and ORFold that can be used together or independently (see here for an example of application). ORFMap searches for all possible ORFs in the six frames of an input genome, and annotate them according to a set of genomic features (e.g. noncoding intergenic ORFs, coding ORFs, noncoding ORFs that overlap with a specific genomic feature...). It provides the user with a GFF file containing the annotations of all identified ORFs that can be directly uploaded on a genome viewer for a visual inspection. In addition, their amino acid and/or nucleotide sequences can be extracted in a FASTA file (for more details, see the complete documentation of ORFmap). ORFold probes the fold potential and the disorder and aggregation propensities of a set of amino acid sequences. The fold potential is estimated with the HCA method [REF], while the disorder and aggregation propensities are calculated with IUPRred, and TANGO respectively [REFiupred REFtango]. The specificity of ORFold lies in the fact that the user can provide the amino acid sequences along with their corresponding annotations in a GFF file. In this case, ORFold produces new GFF files, each containing for each annotated sequence, their fold potential, disorder and aggregation propensities respectively, thereby enabling the manual inspection of these properties for all genomic features in a genome viewer (for more details, see the complete documentation of ORFold).","title":"Overview of ORFmine"},{"location":"orfmine_quickstart.html","text":"Usage # Here is presented an example of the use of ORFmap with ORFold to annotate all the ORFs of a genome, and to characterize their fold potential and disorder and aggregation propensities. The inputs used in this example and the resulting outputs are available in the ORFmine/examples/ folder. Annotation and extraction of ORFs with ORfmap # Annotation of ORFs # ORFmap takes as input (i) a FASTA file containing the nucleotide sequences of all chromosomes or contigs, and (ii) their corresponding annotations in a GFF file (see the GFF3 documentation for more details on the GFF3 format). The following command runs ORFmap on the complete genome of Escherichia coli (Ecoli) available in the \"examples\" folder: orfmap xxxx ORFmap generates a novel GFF file (available in ORFmine/examples/outputs/Ecoli_ORFs_XXXX.gff) containing the annotations of all identified ORFs. Extraction of noncoding ORFs in a FASTA file # The amino acid sequences of all annotated ORFs or specific subsets of ORFs (i.e. only noncoding intergenic ORFs for example) can be extracted and written in a FASTA file with ORFget, a tool provided with ORFmap. The following instruction writes the amino acid sequences of all noncoding ORFs of Ecoli in a FASTA file. orfget xxxx ORFget produces a FASTA file containing the amino acid sequences of all noncoding ORFs annotated by ORFmap (see here for more examples on the use of ORFget). Extraction of protein sequences of Ecoli in a FASTA file # In addition, ORFget enables the reconstruction of all protein sequences of Ecoli according to their definition in the original GFF file. orfget build CDS Characterization of the fold potential and disorder and aggregation propensities of the noncoding ORFs with ORFold # Running ORFold # ORFold only needs a FASTA file containing the amino acid sequences to characterize. That said, a GFF file containing the annotation of the input sequences can be provided as well. In the latter case, ORFold writes the fold potential and disorder and aggregation propensities in 3 GFF files respectively. The latter can be subsequently uploaded on a genome viewer for a visual inspection of the distribution of these properties along the genome's ORFs. The following instruction enables the user to probe the fold potential and disorder and aggregation propensities of all noncoding ORFs annotated by ORFmap along with those of the protein sequences of Ecoli. The GFF file generated by ORFmap is given as well in order to manually inspect with a genome viewer, the distribution of the structural properties of the noncoding ORFs along the genome of Ecoli. orfold xxxx NONCODING + CDS ORFold provides two tables (one per dataset) available in ORFmine/examples/outputs/. Each table contains for each input sequence, the fold potential, disorder and aggregation propensities based on HCA [REF], Iupred [REF] and TANGO [REF] respectively (see here for more details on the calculation of these scores). ORFold also generates three new GFF files containing for each ORF present at the same time in the input FASTA and GFF files, the fold potential and disorder and aggregation propensities respectively. The output GFF files can be subsequently uploaded on a genome viewer. Visualization of the fold potential distribution with ORFplot # ORFplot enables the visualization of the distribution of the fold potential of the noncoding ORFs and protein sequences along with the one of a reference dataset of globular proteins taken from XXXX. orfplot xxxx The output graphic is generated in PNG/PDF format (see here for other examples of use of ORFplot). Note This section implies that Iupred and TANGO have been downloaded and that their paths have been correctly defined during the installation procedure.","title":"Quick start"},{"location":"orfmine_quickstart.html#usage","text":"Here is presented an example of the use of ORFmap with ORFold to annotate all the ORFs of a genome, and to characterize their fold potential and disorder and aggregation propensities. The inputs used in this example and the resulting outputs are available in the ORFmine/examples/ folder.","title":"Usage"},{"location":"orfmine_quickstart.html#annotation-and-extraction-of-orfs-with-orfmap","text":"","title":"Annotation and extraction of ORFs with ORfmap"},{"location":"orfmine_quickstart.html#annotation-of-orfs","text":"ORFmap takes as input (i) a FASTA file containing the nucleotide sequences of all chromosomes or contigs, and (ii) their corresponding annotations in a GFF file (see the GFF3 documentation for more details on the GFF3 format). The following command runs ORFmap on the complete genome of Escherichia coli (Ecoli) available in the \"examples\" folder: orfmap xxxx ORFmap generates a novel GFF file (available in ORFmine/examples/outputs/Ecoli_ORFs_XXXX.gff) containing the annotations of all identified ORFs.","title":"Annotation of ORFs"},{"location":"orfmine_quickstart.html#extraction-of-noncoding-orfs-in-a-fasta-file","text":"The amino acid sequences of all annotated ORFs or specific subsets of ORFs (i.e. only noncoding intergenic ORFs for example) can be extracted and written in a FASTA file with ORFget, a tool provided with ORFmap. The following instruction writes the amino acid sequences of all noncoding ORFs of Ecoli in a FASTA file. orfget xxxx ORFget produces a FASTA file containing the amino acid sequences of all noncoding ORFs annotated by ORFmap (see here for more examples on the use of ORFget).","title":"Extraction of noncoding ORFs in a FASTA file"},{"location":"orfmine_quickstart.html#extraction-of-protein-sequences-of-ecoli-in-a-fasta-file","text":"In addition, ORFget enables the reconstruction of all protein sequences of Ecoli according to their definition in the original GFF file. orfget build CDS","title":"Extraction of protein sequences of Ecoli in a FASTA file"},{"location":"orfmine_quickstart.html#characterization-of-the-fold-potential-and-disorder-and-aggregation-propensities-of-the-noncoding-orfs-with-orfold","text":"","title":"Characterization of the fold potential and disorder and aggregation propensities of the noncoding ORFs with ORFold"},{"location":"orfmine_quickstart.html#running-orfold","text":"ORFold only needs a FASTA file containing the amino acid sequences to characterize. That said, a GFF file containing the annotation of the input sequences can be provided as well. In the latter case, ORFold writes the fold potential and disorder and aggregation propensities in 3 GFF files respectively. The latter can be subsequently uploaded on a genome viewer for a visual inspection of the distribution of these properties along the genome's ORFs. The following instruction enables the user to probe the fold potential and disorder and aggregation propensities of all noncoding ORFs annotated by ORFmap along with those of the protein sequences of Ecoli. The GFF file generated by ORFmap is given as well in order to manually inspect with a genome viewer, the distribution of the structural properties of the noncoding ORFs along the genome of Ecoli. orfold xxxx NONCODING + CDS ORFold provides two tables (one per dataset) available in ORFmine/examples/outputs/. Each table contains for each input sequence, the fold potential, disorder and aggregation propensities based on HCA [REF], Iupred [REF] and TANGO [REF] respectively (see here for more details on the calculation of these scores). ORFold also generates three new GFF files containing for each ORF present at the same time in the input FASTA and GFF files, the fold potential and disorder and aggregation propensities respectively. The output GFF files can be subsequently uploaded on a genome viewer.","title":"Running ORFold"},{"location":"orfmine_quickstart.html#visualization-of-the-fold-potential-distribution-with-orfplot","text":"ORFplot enables the visualization of the distribution of the fold potential of the noncoding ORFs and protein sequences along with the one of a reference dataset of globular proteins taken from XXXX. orfplot xxxx The output graphic is generated in PNG/PDF format (see here for other examples of use of ORFplot). Note This section implies that Iupred and TANGO have been downloaded and that their paths have been correctly defined during the installation procedure.","title":"Visualization of the fold potential distribution with ORFplot"},{"location":"virtualenv.html","text":"Virtual environment #","title":"Virtualenv"},{"location":"virtualenv.html#virtual-environment","text":"","title":"Virtual environment"}]}