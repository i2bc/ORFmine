{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Authors: Chris Papadopoulos 1 , Nicolas Chevrollier, Anne Lopes 1 Recent studies attribute a new role to the noncoding genome in the production of novel peptides. The widespread transcription of noncoding regions and the pervasive translation of the resulting RNAs offer a vast reservoir of novel peptides to the organisms. ORFmine is an open-source package that aims at extracting, annotating, and characterizing the fold potential and the structural properties of all Open Reading Frames (ORF) encoded in a genome (including coding and noncoding sequences). ORFmine consists of two independent programs, ORFmap and ORFold that can be used together or independently (see here for an example of application). ORFMap searches for all possible ORFs longer than 60 nucleotides in the six frames of an input genome, and annotate them according to a set of genomic features (e.g. noncoding intergenic ORFs, coding ORFs, noncoding ORFs that overlap with a specific genomic feature...). It provides the user with a GFF file containing the annotations of all identified ORFs that can be directly uploaded on a genome viewer for a visual inspection. In addition, their amino acid and/or nucleotide sequences can be extracted in a FASTA file (for more details, see the complete documentation of ORFmap). ORFold probes the fold potential and the disorder and aggregation propensities of a set of amino acid sequences (all ORFs annotated by ORFmap for example). The fold potential is estimated with the HCA method [1], while the disorder and aggregation propensities are calculated with IUPRred[2][3][4], and TANGO[5][6][7] respectively. The specificity of ORFold lies in the fact that the user can provide the amino acid sequences along with their corresponding annotations in a GFF file. In this case, ORFold produces new GFF files, each containing for each annotated sequence, their fold potential, disorder and aggregation propensities respectively, thereby enabling the manual inspection of these properties along a genome in a genome viewer (for more details, see the complete documentation of ORFold). References # Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Dosztanyi, Z., Csizmok, V., Tompa, P. & Simon, I. The pairwise energy content estimated from amino acid composition discriminates between folded and intrinsically unstructured proteins. Journal of molecular biology 347, 827\u2013839 (2005). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Fernandez-Escamilla, A.-M., Rousseau, F., Schymkowitz, J. & Serrano, L. Prediction of sequence-dependent and mutational effects on the aggregation of peptides and proteins. Nature biotechnology 22, 1302\u20131306 (2004). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004). Rousseau, F., Schymkowitz, J. & Serrano, L. Protein aggregation and amyloidosis: confusion of the kinds? Current opinion in structural biology 16, 118\u2013126 (2006).","title":"Home"},{"location":"index.html#references","text":"Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Dosztanyi, Z., Csizmok, V., Tompa, P. & Simon, I. The pairwise energy content estimated from amino acid composition discriminates between folded and intrinsically unstructured proteins. Journal of molecular biology 347, 827\u2013839 (2005). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Fernandez-Escamilla, A.-M., Rousseau, F., Schymkowitz, J. & Serrano, L. Prediction of sequence-dependent and mutational effects on the aggregation of peptides and proteins. Nature biotechnology 22, 1302\u20131306 (2004). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004). Rousseau, F., Schymkowitz, J. & Serrano, L. Protein aggregation and amyloidosis: confusion of the kinds? Current opinion in structural biology 16, 118\u2013126 (2006).","title":"References"},{"location":"How_it_works_orfold.html","text":"How works ORFold? # ORFold is a tool developed in python3 which aims at characterizing the fold potential of a set of amino acid sequences with no knowledge of their 3D structures nor evolutionary information (orphan sequences can be treated). The fold potential of a sequence is calculated with the HCA method. Also, ORFold can estimate the disorder, and the aggregation propensities of the input sequences with IUPred and Tango respectively. Hydrophobic Clusters Analysis (HCA) # HCA [1] aims as delineating in an amino acid sequence, regions enriched in strong hydrophobic residues (HCA clusters) and regions of at least four consecutive non-hydrophobic residues (HCA linkers). The patterns of hydrophobic residues can be associated with specific regular secondary structures, and the distribution of the HCA clusters and linkers in a protein sequence can be used to estimate through the HCA score, its ability to fold (completely or partially). This score ranges from -10 to +10 with low HCA scores indicating sequences depleted in hydrophobic clusters and expected to be disordered in solution, while high HCA scores reflect sequences enriched in hydrophobic clusters and expected to generate aggregates in solution, though some of them could fold in lipidic environments. Foldable sequences are known to display an equilibrium between hydrophobic and hydrophilic residues (average of 33% of hydrophobic residues in globular proteins). They are mostly associated with intermediate HCA score values. The HCA score is calculated using the freely available software pyHCA which can be downloaded and installed following the instructions of its developers: https://github.com/T-B-F/pyHCA Tango # Tango [5][6][7] is a method which aims at predicting aggregation nucleating regions in protein sequences. If specified by the user, ORFold can calculate and add the aggregation propensity of a sequence in the output. Tango is not freely available software, and the user of ORFold should first contact the Tango developers to have access to the source code: http://tango.crg.es For the aggregation propensity estimation, according to the protocol proposed by Linding et al.[6], a sequence segment is considered as aggregation prone if it is composed of at least five consecutive residues predicted as populating a b-aggregated conformation with a percentage occupancy greater than 5%. Then, the aggregation propensity of each sequence is defined as the fraction of residues predicted in aggregation prone segments. IUPred # IUPred2A [2][3][4] is one of the best methods for the prediction of Intrinsically Disordered Proteins (IDPs) and can be used as a complement to the HCA score prediction. If specified by the user, ORFold can calculate and add the disorder propensity of a sequence in the output. IUPred is not freely available, and the user of ORFold should first contact the IUPred developers to have access to the source code : https://iupred2a.elte.hu For the disorder propensity estimation, in order to be consistent with the estimation of the aggregation propensity, ORFold searches for regions on the protein sequence that present at least five consecutive residues with a disorder probability higher than 0.5. The disorder propensity of each sequence is defined as the fraction of residues predicted as located in a highly disordered segment. References # Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Dosztanyi, Z., Csizmok, V., Tompa, P. & Simon, I. The pairwise energy content estimated from amino acid composition discriminates between folded and intrinsically unstructured proteins. Journal of molecular biology 347, 827\u2013839 (2005). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Fernandez-Escamilla, A.-M., Rousseau, F., Schymkowitz, J. & Serrano, L. Prediction of sequence-dependent and mutational effects on the aggregation of peptides and proteins. Nature biotechnology 22, 1302\u20131306 (2004). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004). Rousseau, F., Schymkowitz, J. & Serrano, L. Protein aggregation and amyloidosis: confusion of the kinds? Current opinion in structural biology 16, 118\u2013126 (2006).","title":"How it works?"},{"location":"How_it_works_orfold.html#how-works-orfold","text":"ORFold is a tool developed in python3 which aims at characterizing the fold potential of a set of amino acid sequences with no knowledge of their 3D structures nor evolutionary information (orphan sequences can be treated). The fold potential of a sequence is calculated with the HCA method. Also, ORFold can estimate the disorder, and the aggregation propensities of the input sequences with IUPred and Tango respectively.","title":"How works ORFold?"},{"location":"How_it_works_orfold.html#hydrophobic-clusters-analysis-hca","text":"HCA [1] aims as delineating in an amino acid sequence, regions enriched in strong hydrophobic residues (HCA clusters) and regions of at least four consecutive non-hydrophobic residues (HCA linkers). The patterns of hydrophobic residues can be associated with specific regular secondary structures, and the distribution of the HCA clusters and linkers in a protein sequence can be used to estimate through the HCA score, its ability to fold (completely or partially). This score ranges from -10 to +10 with low HCA scores indicating sequences depleted in hydrophobic clusters and expected to be disordered in solution, while high HCA scores reflect sequences enriched in hydrophobic clusters and expected to generate aggregates in solution, though some of them could fold in lipidic environments. Foldable sequences are known to display an equilibrium between hydrophobic and hydrophilic residues (average of 33% of hydrophobic residues in globular proteins). They are mostly associated with intermediate HCA score values. The HCA score is calculated using the freely available software pyHCA which can be downloaded and installed following the instructions of its developers: https://github.com/T-B-F/pyHCA","title":"Hydrophobic Clusters Analysis (HCA)"},{"location":"How_it_works_orfold.html#tango","text":"Tango [5][6][7] is a method which aims at predicting aggregation nucleating regions in protein sequences. If specified by the user, ORFold can calculate and add the aggregation propensity of a sequence in the output. Tango is not freely available software, and the user of ORFold should first contact the Tango developers to have access to the source code: http://tango.crg.es For the aggregation propensity estimation, according to the protocol proposed by Linding et al.[6], a sequence segment is considered as aggregation prone if it is composed of at least five consecutive residues predicted as populating a b-aggregated conformation with a percentage occupancy greater than 5%. Then, the aggregation propensity of each sequence is defined as the fraction of residues predicted in aggregation prone segments.","title":"Tango"},{"location":"How_it_works_orfold.html#iupred","text":"IUPred2A [2][3][4] is one of the best methods for the prediction of Intrinsically Disordered Proteins (IDPs) and can be used as a complement to the HCA score prediction. If specified by the user, ORFold can calculate and add the disorder propensity of a sequence in the output. IUPred is not freely available, and the user of ORFold should first contact the IUPred developers to have access to the source code : https://iupred2a.elte.hu For the disorder propensity estimation, in order to be consistent with the estimation of the aggregation propensity, ORFold searches for regions on the protein sequence that present at least five consecutive residues with a disorder probability higher than 0.5. The disorder propensity of each sequence is defined as the fraction of residues predicted as located in a highly disordered segment.","title":"IUPred"},{"location":"How_it_works_orfold.html#references","text":"Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Dosztanyi, Z., Csizmok, V., Tompa, P. & Simon, I. The pairwise energy content estimated from amino acid composition discriminates between folded and intrinsically unstructured proteins. Journal of molecular biology 347, 827\u2013839 (2005). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Fernandez-Escamilla, A.-M., Rousseau, F., Schymkowitz, J. & Serrano, L. Prediction of sequence-dependent and mutational effects on the aggregation of peptides and proteins. Nature biotechnology 22, 1302\u20131306 (2004). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004). Rousseau, F., Schymkowitz, J. & Serrano, L. Protein aggregation and amyloidosis: confusion of the kinds? Current opinion in structural biology 16, 118\u2013126 (2006).","title":"References"},{"location":"Objective_orfold.html","text":"Aims and general description of ORFold # ORFold aims at estimating the fold potential of a set of amino acid sequences using the Hydrophobic Clusters Analysis (HCA) method [1]. We define the foldability of an amino acid sequence as its ability to fold to a stable 3D structure or to a molten globule state in which the specific tertiary structure is lost whereas the secondary structures are intact. ORFold calculates the HCA foldability score of each given sequence. Furthermore, ORFold can estimate the disorder and/or aggregation propensities of the input sequences using the IUPred [2][3][4] and Tango [5][6][7] methods respectively. References # Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Dosztanyi, Z., Csizmok, V., Tompa, P. & Simon, I. The pairwise energy content estimated from amino acid composition discriminates between folded and intrinsically unstructured proteins. Journal of molecular biology 347, 827\u2013839 (2005). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Fernandez-Escamilla, A.-M., Rousseau, F., Schymkowitz, J. & Serrano, L. Prediction of sequence-dependent and mutational effects on the aggregation of peptides and proteins. Nature biotechnology 22, 1302\u20131306 (2004). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004). Rousseau, F., Schymkowitz, J. & Serrano, L. Protein aggregation and amyloidosis: confusion of the kinds? Current opinion in structural biology 16, 118\u2013126 (2006).","title":"Objective"},{"location":"Objective_orfold.html#aims-and-general-description-of-orfold","text":"ORFold aims at estimating the fold potential of a set of amino acid sequences using the Hydrophobic Clusters Analysis (HCA) method [1]. We define the foldability of an amino acid sequence as its ability to fold to a stable 3D structure or to a molten globule state in which the specific tertiary structure is lost whereas the secondary structures are intact. ORFold calculates the HCA foldability score of each given sequence. Furthermore, ORFold can estimate the disorder and/or aggregation propensities of the input sequences using the IUPred [2][3][4] and Tango [5][6][7] methods respectively.","title":"Aims and general description of ORFold"},{"location":"Objective_orfold.html#references","text":"Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Dosztanyi, Z., Csizmok, V., Tompa, P. & Simon, I. The pairwise energy content estimated from amino acid composition discriminates between folded and intrinsically unstructured proteins. Journal of molecular biology 347, 827\u2013839 (2005). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Fernandez-Escamilla, A.-M., Rousseau, F., Schymkowitz, J. & Serrano, L. Prediction of sequence-dependent and mutational effects on the aggregation of peptides and proteins. Nature biotechnology 22, 1302\u20131306 (2004). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004). Rousseau, F., Schymkowitz, J. & Serrano, L. Protein aggregation and amyloidosis: confusion of the kinds? Current opinion in structural biology 16, 118\u2013126 (2006).","title":"References"},{"location":"Plot_orfold.html","text":"Plot of the ORFold output # The output table generated by ORFold can be subsequently given to ORFold to generate a plot of the HCA score distribution. The user can provide several tables in order to compare different HCA score distributions. In this case, ORFplot will plot all the distributions on the same plot (the tables must be given with the -tab option). The HCA score distribution of a set of globular proteins extracted from [1] is represented by the grey histogram. We defined three sequence categories according to their HCA scores: low, intermediate and high HCA score sequences. The boundaries of these categories are defined so that 95% of the globular proteins fall into the intermediate HCA score bin. Dotted black lines delineate the boundaries of each category. Each plotted distribution is compared with the one of the globular proteins set with a Kolmogorov Smirnov test. Asterisks on the plot denote level of significance: * < 0.05, ** < 0.01, *** < 0.001. By default, the names used in the legend of the resulting plot are the root names of the input table files. However, the user can write his own names in the legend with the -names option. The names must be given in the same order as the table files. orfplot -tab sequences_Y.tab sequences_X.tab sequences_Z.tab This example will generate the HCA score distributions of the sequences stored in the sequences_Y.tab, sequences_X.tab and sequences_Z.tab files. The resulting legend will be sequences_Y, sequences_X, and sequences_Z respectively. orfplot -tab sequences_Y.tab sequences_X.tab sequences_Z.tab -names Noncoding Coding Translated This example will generate the HCA score distributions of the sequences stored in the sequences_Y.tab, sequences_X.tab and sequences_Z.tab files. The resulting legend will be \"Noncoding\", \"Coding\" and \"Translated\", respectively. Note If the names consist of single words the user can write them the one after the other as shown in the example above. However, if the user wishes to use multiple words in the legend labels (ie Noncoding sequences - Homo sapiens , Coding sequences - Homo sapiens, Translated sequences - Homo sapiens) they must be enclosed in double quotes. orfplot -tab sequences_Y.tab sequences_X.tab sequences_Z.tab -names \"Noncoding sequences - Homo sapiens\" \"Coding sequences - Homo sapiens\" \"Translated sequences - Homo sapiens\" References M\u00e9sz\u00e1ros B, Erd\u0151s G, Doszt\u00e1nyi Z (2018) IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46:W329\u2013W337","title":"Plots with ORFplot"},{"location":"Plot_orfold.html#plot-of-the-orfold-output","text":"The output table generated by ORFold can be subsequently given to ORFold to generate a plot of the HCA score distribution. The user can provide several tables in order to compare different HCA score distributions. In this case, ORFplot will plot all the distributions on the same plot (the tables must be given with the -tab option). The HCA score distribution of a set of globular proteins extracted from [1] is represented by the grey histogram. We defined three sequence categories according to their HCA scores: low, intermediate and high HCA score sequences. The boundaries of these categories are defined so that 95% of the globular proteins fall into the intermediate HCA score bin. Dotted black lines delineate the boundaries of each category. Each plotted distribution is compared with the one of the globular proteins set with a Kolmogorov Smirnov test. Asterisks on the plot denote level of significance: * < 0.05, ** < 0.01, *** < 0.001. By default, the names used in the legend of the resulting plot are the root names of the input table files. However, the user can write his own names in the legend with the -names option. The names must be given in the same order as the table files. orfplot -tab sequences_Y.tab sequences_X.tab sequences_Z.tab This example will generate the HCA score distributions of the sequences stored in the sequences_Y.tab, sequences_X.tab and sequences_Z.tab files. The resulting legend will be sequences_Y, sequences_X, and sequences_Z respectively. orfplot -tab sequences_Y.tab sequences_X.tab sequences_Z.tab -names Noncoding Coding Translated This example will generate the HCA score distributions of the sequences stored in the sequences_Y.tab, sequences_X.tab and sequences_Z.tab files. The resulting legend will be \"Noncoding\", \"Coding\" and \"Translated\", respectively. Note If the names consist of single words the user can write them the one after the other as shown in the example above. However, if the user wishes to use multiple words in the legend labels (ie Noncoding sequences - Homo sapiens , Coding sequences - Homo sapiens, Translated sequences - Homo sapiens) they must be enclosed in double quotes. orfplot -tab sequences_Y.tab sequences_X.tab sequences_Z.tab -names \"Noncoding sequences - Homo sapiens\" \"Coding sequences - Homo sapiens\" \"Translated sequences - Homo sapiens\" References M\u00e9sz\u00e1ros B, Erd\u0151s G, Doszt\u00e1nyi Z (2018) IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46:W329\u2013W337","title":"Plot of the ORFold output"},{"location":"Run_orfold.html","text":"Running ORFold: # Inputs # Basically, ORFold requires only a FASTA file containing the amino acid sequences to treat (given with the -fna label). ORFold can handle several FASTA files at the same time. In this case, it will treat them independently and will generate as many outputs as entered FASTA files. FASTA file example: >aminoacid_sequence_1 AGNVCFGGRTYMPDFDGMSCVNWQERT >aminoacid_sequence_2 MPDFMPCNVSDRTEEEPMSPARTYDFGHKLCVSDFTPMLKKPERT How to estimate the fold potential and/or disorder and aggregation propensities # By default, ORFold only estimates the fold potential of the input sequences. The disorder and aggregation propensities can be however calculated as well. The user can specify which calculation methods are to be launched with the -options argument. Each method used by ORFold is referred by its initial: HCA : H IUPred : I TANGO : T The user must specify the combination of methods he wants to apply on the input sequences giving their initials with the -options argument without any space: -options HIT for running the 3 programs or -options HT if the user wants to run only HCA and Tango for example. The order of the letters has no importance, -options HIT and -options THI will lead to the same result. Basic run # The following instruction estimates the fold potential, and the disorder and aggregation propensities of all amino acid sequences contained in the input fASTA file: orfold -fna sequences.fasta -options HIT The user has to notice that IUPred and Tango provide additional information to HCA but will slow down considerably ORFold for large datasets. The next instruction only calculate the fold potential with HCA: orfold -fna sequences.fasta -options H Output: # ORFold produces a table (fasta_rootname.tab) that contains for each input sequence, the computed values (separated by tabulations) according to the user request (fold potential, and/or disorder and/or aggregation propensities). Output file example with -options HIT (fold potential, disorder and aggregation propensities estimated from HCA, IUPred and Tango, see here for more details): Seq_ID HCA Disord Aggreg aminoacid_sequence_1 1.340 0.000 0.230 aminoacid_sequence_2 -0.230 0.120 0.012 Output file example with -options H (fold potential estimated with HCA, see here for more details): Seq_ID HCA Disord Aggreg aminoacid_sequence_1 1.340 nan nan aminoacid_sequence_2 -0.230 nan nan","title":"Basic run ORFold"},{"location":"Run_orfold.html#running-orfold","text":"","title":"Running ORFold:"},{"location":"Run_orfold.html#inputs","text":"Basically, ORFold requires only a FASTA file containing the amino acid sequences to treat (given with the -fna label). ORFold can handle several FASTA files at the same time. In this case, it will treat them independently and will generate as many outputs as entered FASTA files. FASTA file example: >aminoacid_sequence_1 AGNVCFGGRTYMPDFDGMSCVNWQERT >aminoacid_sequence_2 MPDFMPCNVSDRTEEEPMSPARTYDFGHKLCVSDFTPMLKKPERT","title":"Inputs"},{"location":"Run_orfold.html#how-to-estimate-the-fold-potential-andor-disorder-and-aggregation-propensities","text":"By default, ORFold only estimates the fold potential of the input sequences. The disorder and aggregation propensities can be however calculated as well. The user can specify which calculation methods are to be launched with the -options argument. Each method used by ORFold is referred by its initial: HCA : H IUPred : I TANGO : T The user must specify the combination of methods he wants to apply on the input sequences giving their initials with the -options argument without any space: -options HIT for running the 3 programs or -options HT if the user wants to run only HCA and Tango for example. The order of the letters has no importance, -options HIT and -options THI will lead to the same result.","title":"How to estimate the fold potential and/or disorder and aggregation propensities"},{"location":"Run_orfold.html#basic-run","text":"The following instruction estimates the fold potential, and the disorder and aggregation propensities of all amino acid sequences contained in the input fASTA file: orfold -fna sequences.fasta -options HIT The user has to notice that IUPred and Tango provide additional information to HCA but will slow down considerably ORFold for large datasets. The next instruction only calculate the fold potential with HCA: orfold -fna sequences.fasta -options H","title":"Basic run"},{"location":"Run_orfold.html#output","text":"ORFold produces a table (fasta_rootname.tab) that contains for each input sequence, the computed values (separated by tabulations) according to the user request (fold potential, and/or disorder and/or aggregation propensities). Output file example with -options HIT (fold potential, disorder and aggregation propensities estimated from HCA, IUPred and Tango, see here for more details): Seq_ID HCA Disord Aggreg aminoacid_sequence_1 1.340 0.000 0.230 aminoacid_sequence_2 -0.230 0.120 0.012 Output file example with -options H (fold potential estimated with HCA, see here for more details): Seq_ID HCA Disord Aggreg aminoacid_sequence_1 1.340 nan nan aminoacid_sequence_2 -0.230 nan nan","title":"Output:"},{"location":"Run_orfold_advanced.html","text":"Running ORFold: # Advanced run: # Mapping of the fold potential and the disorder and aggregation propensities along the genome of an organism # In the previous section we presented how to launch ORFold on a set of amino acid sequences stored in a FASTA file. However, the originality of ORFold relies on the fact that the user can manually inspect the distribution of the properties estimated with ORFold (fold potential, and disorder and aggregation propensities) along a genome of interest. In this case, the user must provide the genome annotation file (GFF) along with the input FASTA file. ORFold will return new GFF files (one per studied property) that contain for the ORFs provided in the input FASTA file, their corresponding property (fold potential, disorder or aggregation propensities). The values are stored in the column #9 of the output GFF files. The GFF files can be subsequently uploaded on a genome viewer such as IGV [1]. The input GFF file must be given with the -gff option as follows: orfold -fna sequences.fasta -options HIT -gff sequences.gff ORFold generates a sequences.tab file containing the fold potential, and the disorder and aggregation propensities of each sequence present in the input FASTA file. Additionally, ORFold produces three new GFF files: sequences_HCA.gff sequences_IUPRED.gff sequences_TANGO.gff The output GFF files are identical to the one provided by the user except that for the sequences present at the same time in the FASTA and the GFF files that were given as inputs, the column #9 is now replaced by the fold potential, or the disorder or aggregation propensities estimated by ORFold. That way, the corresponding sequences can be colored according to these values on a genome viewer, thereby enabling the visual inspection of these properties along the input genome. Notice that on IGV, blue indicates low values (for all mapped properties) while red indicates high values. Figure 1: Color scale for the HCA score values Note Notice that the ID of the sequences given in the FASTA file (i.e. annotation after the \">\" in the FASTA file) must be strictly identical to those of the corresponding sequences in the GFF file (i.e. ID indicated in the column #3 of the GFF file). Dealing with multiple files at the same time: # ORFold can handle multiple input files (FASTA and GFF) and will associate the FASTA and GFF files according to the following rules: If the user provides the same number of FASTA and GFF files, ORFold associates them based on their root name, no matter the order of the files. orfold -fna sequences_Y.fasta sequences_X.fasta -options H -gff sequences_X.gff sequences_Y.gff In this case, ORFold associates: sequence_Y.fasta with sequence_Y.gff sequence_X.fasta with sequence_X.gff I If the user provides the same number of FASTA and GFF files, but their root names are not identical, ORFold associates them according to the order of the files in the command line. orfold -fna sequences_Y.fasta sequences_X.fasta -options H -gff sequences_A.gff sequences_B.gff In this case, ORFold associates: sequence_Y.fasta with sequence_A.gff sequence_X.fasta with sequence_B.gff If the user provides multiple FASTA files and only one GFF file, then: If the name of the GFF file matches with the name of one of the FASTA files, the two files are associated, while the other FASTA files are not associated to the input GFF file. orfold -fna sequences_Y.fasta sequences_X.fasta -options H -gff sequences_X.gff ORFold associates: sequences_X.fasta with sequences_X.gff sequences_Y.fasta with nothing If the name of the GFF file does not match with any of the names of the FASTA files, then the GFF file will be associated with all the FASTA files, considering that the FASTA files correspond to different subgroups of the same dataset. orfold -fna sequences_Y.fasta sequences_X.fasta -options H -gff sequences_B.gff ORFold associates: sequences_Y.fasta with sequences_B.gff sequences_X.fasta with sequences_B.gff If the user provides multiple FASTA and GFF files (but not the same number) , all GFF files must have a corresponding FASTA file with the same root name. Otherwise, ORFold will give an ERROR message. orfold -fna sequences_Y.fasta sequences_X.fasta sequences_Z.fasta -options H -gff sequences_Z.fasta sequences_Y.gff ORFold associates: sequences_Y.fasta with sequences_Y.gff sequences_Z.fasta with sequences_Z.gff sequences_X.fasta with nothing orfold -fna sequences_Y.fasta sequences_X.fasta sequences_Z.fasta -options H -gff sequences_B.fasta sequences_A.gff ORFold will give the following error message: Oups! You provided GFF file(s) which has/have no correspondance to the input FASTA files Running ORFold on subsets of randomly selected sequences # Working with complete genomes could generate big amounts of sequences which can dramatically increase the computational time of ORFold when dealing with large genomes (especially if the estimation of the disorder and aggregation propensities are activated). If the user does not want to treat all the sequences, he can create a random sample of the input sequences, large enough to have an estimation of the distribution of the studied properties of its dataset from a representative sample of the input sequences. To do so, the user must indicate the number of sequences that are to be randomly selected with the -N option. For a representative dataset, we recommend selecting at least 10000 sequences. orfold -fna sequences.fasta -options HIT -gff sequences.gff -N 10000 In this example, ORFold will estimate the fold potential, and the disorder and aggregation propensities on a sample of 10000 sequences extracted randomly from the initial sequences.fasta file. Note If the user works with more than one FASTA file and wishes to create random samples for all the input sequence files, he has to indicate in the -N option the size for each input file explicitly (in the same order as the inputs passed in the -fna option). orfold -fna sequences_X.pfasta sequences_Y.pfasta -options H -N 1500 3000 Also, if the user wants to sample two subsets of same sizes, he has to indicate the subset sizes explicitly for each input orfold -fna sequences_X.pfasta sequences_Y.pfasta -options H -N 1500 1500 If the user whishes to calculate the fold potential of all the sequences of one of the given inputs, he has to indicate it with the \"all\" flag (again with respect to the order of input files) orfold -fna sequences_X.pfasta sequences_Y.pfasta -options H -N all 3000 In this case, ORFold will calculate the fold potential for all the sequences in the sequences_X file while will generate a random sample of 3000 sequences for the sequences_Y file. References Robinson JT, Thorvaldsd\u00f3ttir H, Winckler W, et al (2011) Integrative genomics viewer. Nature biotechnology 29:24\u201326","title":"Advanced run ORFold"},{"location":"Run_orfold_advanced.html#running-orfold","text":"","title":"Running ORFold:"},{"location":"Run_orfold_advanced.html#advanced-run","text":"","title":"Advanced run:"},{"location":"Run_orfold_advanced.html#mapping-of-the-fold-potential-and-the-disorder-and-aggregation-propensities-along-the-genome-of-an-organism","text":"In the previous section we presented how to launch ORFold on a set of amino acid sequences stored in a FASTA file. However, the originality of ORFold relies on the fact that the user can manually inspect the distribution of the properties estimated with ORFold (fold potential, and disorder and aggregation propensities) along a genome of interest. In this case, the user must provide the genome annotation file (GFF) along with the input FASTA file. ORFold will return new GFF files (one per studied property) that contain for the ORFs provided in the input FASTA file, their corresponding property (fold potential, disorder or aggregation propensities). The values are stored in the column #9 of the output GFF files. The GFF files can be subsequently uploaded on a genome viewer such as IGV [1]. The input GFF file must be given with the -gff option as follows: orfold -fna sequences.fasta -options HIT -gff sequences.gff ORFold generates a sequences.tab file containing the fold potential, and the disorder and aggregation propensities of each sequence present in the input FASTA file. Additionally, ORFold produces three new GFF files: sequences_HCA.gff sequences_IUPRED.gff sequences_TANGO.gff The output GFF files are identical to the one provided by the user except that for the sequences present at the same time in the FASTA and the GFF files that were given as inputs, the column #9 is now replaced by the fold potential, or the disorder or aggregation propensities estimated by ORFold. That way, the corresponding sequences can be colored according to these values on a genome viewer, thereby enabling the visual inspection of these properties along the input genome. Notice that on IGV, blue indicates low values (for all mapped properties) while red indicates high values. Figure 1: Color scale for the HCA score values Note Notice that the ID of the sequences given in the FASTA file (i.e. annotation after the \">\" in the FASTA file) must be strictly identical to those of the corresponding sequences in the GFF file (i.e. ID indicated in the column #3 of the GFF file).","title":"Mapping of the fold potential and the disorder and aggregation propensities along the genome of an organism"},{"location":"Run_orfold_advanced.html#dealing-with-multiple-files-at-the-same-time","text":"ORFold can handle multiple input files (FASTA and GFF) and will associate the FASTA and GFF files according to the following rules: If the user provides the same number of FASTA and GFF files, ORFold associates them based on their root name, no matter the order of the files. orfold -fna sequences_Y.fasta sequences_X.fasta -options H -gff sequences_X.gff sequences_Y.gff In this case, ORFold associates: sequence_Y.fasta with sequence_Y.gff sequence_X.fasta with sequence_X.gff I If the user provides the same number of FASTA and GFF files, but their root names are not identical, ORFold associates them according to the order of the files in the command line. orfold -fna sequences_Y.fasta sequences_X.fasta -options H -gff sequences_A.gff sequences_B.gff In this case, ORFold associates: sequence_Y.fasta with sequence_A.gff sequence_X.fasta with sequence_B.gff If the user provides multiple FASTA files and only one GFF file, then: If the name of the GFF file matches with the name of one of the FASTA files, the two files are associated, while the other FASTA files are not associated to the input GFF file. orfold -fna sequences_Y.fasta sequences_X.fasta -options H -gff sequences_X.gff ORFold associates: sequences_X.fasta with sequences_X.gff sequences_Y.fasta with nothing If the name of the GFF file does not match with any of the names of the FASTA files, then the GFF file will be associated with all the FASTA files, considering that the FASTA files correspond to different subgroups of the same dataset. orfold -fna sequences_Y.fasta sequences_X.fasta -options H -gff sequences_B.gff ORFold associates: sequences_Y.fasta with sequences_B.gff sequences_X.fasta with sequences_B.gff If the user provides multiple FASTA and GFF files (but not the same number) , all GFF files must have a corresponding FASTA file with the same root name. Otherwise, ORFold will give an ERROR message. orfold -fna sequences_Y.fasta sequences_X.fasta sequences_Z.fasta -options H -gff sequences_Z.fasta sequences_Y.gff ORFold associates: sequences_Y.fasta with sequences_Y.gff sequences_Z.fasta with sequences_Z.gff sequences_X.fasta with nothing orfold -fna sequences_Y.fasta sequences_X.fasta sequences_Z.fasta -options H -gff sequences_B.fasta sequences_A.gff ORFold will give the following error message: Oups! You provided GFF file(s) which has/have no correspondance to the input FASTA files","title":"Dealing with multiple files at the same time:"},{"location":"Run_orfold_advanced.html#running-orfold-on-subsets-of-randomly-selected-sequences","text":"Working with complete genomes could generate big amounts of sequences which can dramatically increase the computational time of ORFold when dealing with large genomes (especially if the estimation of the disorder and aggregation propensities are activated). If the user does not want to treat all the sequences, he can create a random sample of the input sequences, large enough to have an estimation of the distribution of the studied properties of its dataset from a representative sample of the input sequences. To do so, the user must indicate the number of sequences that are to be randomly selected with the -N option. For a representative dataset, we recommend selecting at least 10000 sequences. orfold -fna sequences.fasta -options HIT -gff sequences.gff -N 10000 In this example, ORFold will estimate the fold potential, and the disorder and aggregation propensities on a sample of 10000 sequences extracted randomly from the initial sequences.fasta file. Note If the user works with more than one FASTA file and wishes to create random samples for all the input sequence files, he has to indicate in the -N option the size for each input file explicitly (in the same order as the inputs passed in the -fna option). orfold -fna sequences_X.pfasta sequences_Y.pfasta -options H -N 1500 3000 Also, if the user wants to sample two subsets of same sizes, he has to indicate the subset sizes explicitly for each input orfold -fna sequences_X.pfasta sequences_Y.pfasta -options H -N 1500 1500 If the user whishes to calculate the fold potential of all the sequences of one of the given inputs, he has to indicate it with the \"all\" flag (again with respect to the order of input files) orfold -fna sequences_X.pfasta sequences_Y.pfasta -options H -N all 3000 In this case, ORFold will calculate the fold potential for all the sequences in the sequences_X file while will generate a random sample of 3000 sequences for the sequences_Y file. References Robinson JT, Thorvaldsd\u00f3ttir H, Winckler W, et al (2011) Integrative genomics viewer. Nature biotechnology 29:24\u201326","title":"Running ORFold on subsets of randomly selected sequences"},{"location":"download.html","text":"Download #","title":"Download"},{"location":"download.html#download","text":"","title":"Download"},{"location":"index_orfmap.html","text":"Table of contents # Understanding ORFMap Introduction ORF definition Overlap definition ORF annotation Installation Install Usage Command line examples","title":"Index orfmap"},{"location":"index_orfmap.html#table-of-contents","text":"Understanding ORFMap Introduction ORF definition Overlap definition ORF annotation Installation Install Usage Command line examples","title":"Table of contents"},{"location":"index_orfmine.html","text":"Table of contents # Understanding ORFMap Introduction ORF definition Overlap definition ORF annotation Installation Install Usage Command line examples","title":"Index orfmine"},{"location":"index_orfmine.html#table-of-contents","text":"Understanding ORFMap Introduction ORF definition Overlap definition ORF annotation Installation Install Usage Command line examples","title":"Table of contents"},{"location":"index_ori.html","text":"ORFmine # For full documentation visit mkdocs.org . Commands # mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout # mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"ORFmine"},{"location":"index_ori.html#orfmine","text":"For full documentation visit mkdocs.org .","title":"ORFmine"},{"location":"index_ori.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"index_ori.html#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"installation.html","text":"Installation # Installing ORFmine package #","title":"Installation"},{"location":"installation.html#installation","text":"","title":"Installation"},{"location":"installation.html#installing-orfmine-package","text":"","title":"Installing ORFmine package"},{"location":"orfget_param.html","text":"ORFget parameters # Mandatory -fna nucleotide fasta file of the genome whose ORFs are to extract -gff GFF annotation file -o root name of the output fasta Optional -h, --help shows this help message and exits -features_include genomic features or annotation patterns to be searched for the ORF selection. ORFs whose annotations match the entered patterns or genomic features are written in the output fasta file. (default: all genomic features present in the input GFF, consequently, all annotated ORFs will be written in the output GFF file)(see the ORFget section for more details). -features_exclude genomic features or annotation patterns to be searched for the ORF selection. ORFs whose annotations match the entered patterns or genomic features are not written in the output fasta file. (default: None, consequently, all annotated ORFs will be written in the output GFF file)(see the ORFget section for more details). -chr_exclude to exclude a (or a subset of) seqID(s) for the ORF extraction and writing - the ORFs belonging to this seqID (usually a chromosome or a contig) will not be written in the output FASTA file no matter their annotation category (default: None). -N number of ORFs randomly selected for the writing according to their genomic feature or pattern.","title":"ORFget parameters"},{"location":"orfget_param.html#orfget-parameters","text":"Mandatory -fna nucleotide fasta file of the genome whose ORFs are to extract -gff GFF annotation file -o root name of the output fasta Optional -h, --help shows this help message and exits -features_include genomic features or annotation patterns to be searched for the ORF selection. ORFs whose annotations match the entered patterns or genomic features are written in the output fasta file. (default: all genomic features present in the input GFF, consequently, all annotated ORFs will be written in the output GFF file)(see the ORFget section for more details). -features_exclude genomic features or annotation patterns to be searched for the ORF selection. ORFs whose annotations match the entered patterns or genomic features are not written in the output fasta file. (default: None, consequently, all annotated ORFs will be written in the output GFF file)(see the ORFget section for more details). -chr_exclude to exclude a (or a subset of) seqID(s) for the ORF extraction and writing - the ORFs belonging to this seqID (usually a chromosome or a contig) will not be written in the output FASTA file no matter their annotation category (default: None). -N number of ORFs randomly selected for the writing according to their genomic feature or pattern.","title":"ORFget parameters"},{"location":"orfget_run.html","text":"Extraction and writing of ORF sequences with ORFget # ORFget is a tool provided with ORFmap that allows the user to extract the protein and/or nulceotide sequences of specific subsets of ORFs according to their annotation categories (see here for a description of all ORF categories). ORFget deals with annotation patterns, thereby allowing different levels of annotation in a very easy fashion. ORFget has two principal options: -features_include : list of motifs that will be used to define the ORFs that will be included in the FASTA output. The sequences whose annotations include these patterns will be retained in the output FASTA file -features_exclude : list of motifs that will be used to define the ORFs that will be excluded in the FASTA output. The sequences whose annotations include these patterns will not be written in the output FASTA file The searched patterns can be specific (for a finer selection) or more general. Note For example, the motif \"nc\" appears in the features: nc _intergenic, nc _ovp_same-mRNA, nc _ovp_opp-mRNA and nc _ovp_same-tRNA. As a result, the option -feature_include nc will keep all the four feature categories. The option -feature_include nc_ovp will keep: nc_ovp _same-mRNA nc_ovp _opp-mRNA nc_ovp _same-tRNA The option -feature_include nc_ovp_same will keep: nc_ovp_same -mRNA nc_ovp_same -tRNA The option -feature_include mRNA will keep: nc_ovp_same- mRNA nc_ovp_opp- mRNA The option -feature_exclude opp will eliminate the nc_ovp_ opp -mRNA and will keep: nc_intergenic nc_ovp_same-mRNA nc_ovp_same-tRNA etc... Here are presented some examples of selection of ORFs with ORFget. Extraction of the sequences of all the ORFs of a GFF file # The following command writes the amino acid sequences of all ORFs annotated in the input GFF file. orfget -fna genome.fasta -gff mapping_orf_genome.gff ORFget generates a FASTA file containing all the corresponding amino acid sequences. Extraction of the sequences of all noncoding ORFs identified with ORFmap # The following commands, each enable the user to write the amino acid sequences of all noncoding ORFs no matter their status (i.e. intergenic or overlapping) (see here for a description of all ORF categories). orfget -fna genome.fasta -gff mapping_orf_genome.gff -features_include nc or orfget -fna genome.fasta -gff mapping_orf_genome.gff -features_include nc_intergenic nc_ovp or orfget -fna genome.fasta -gff mapping_orf_genome.gff -features_exclude c_CDS Extraction of the sequences of a specific subset of ORFs according to their annotation # The following instruction writes the amino acid sequences of the ORFs which overlap with CDS on the same, or on the opposite strand. orfget -fna genome.fasta -gff mapping_orf_genome.gff -features_include nc_ovp_same-CDS nc_ovp_opp-CDS Notice that using the argument \"features_exclude\" assumes that the selection operates on all genomic features except those that are excluded. Consequently, if the user wants to select all noncoding sequences except those overlapping CDS, mRNAs, tRNAs, and rRNAs, he must exclude the coding ORFs (c_CDS) as well. Otherwise, they will be kept. orfget -fna genome.fasta -gff mapping_orf_genome.gff -features_exclude c_CDS nc_same_ovp-tRNA nc_same_ovp-rRNA nc_opp_ovp-mRNA nc_opp_ovp-tRNA nc_opp_ovp-rRNA nc_opp_ovp-mRNA Extraction of the sequences of a random subset of ORFs # Sometimes, for computational time or storage reasons, the user does not want to deal with all the ORFs of a specific category. ORFget can provide the user with a subset of N (to be defined by the user) randomly selected ORFs from a specific ORF category. The last instruction writes the sequences of 10000 randomly selected noncoding intergenic ORFs. orfget -fna genome.fasta -gff mapping_orf_genome.gff -features_include nc_intergenic -n 10000 Reconstruction of protein sequences # In addition, ORFget enables the reconstruction of all protein sequences of a genome (i.e. all isoforms) according to their definition in the original GFF file. The following instruction writes all the resulting sequences in a FASTA file. orfget -fna genome.fasta -gff genome.gff -features_include CDS Writing amino acid or nucleotide sequences # By default, ORFget will generate the amino acid sequences of the desired ORFs in a FASTA file with the extension .pfasta . If the user wishes to generate the nucleotide or even both nucleotide and amino acids sequences, he must use the option -type nucl and -type both , respectively.","title":"ORF extraction with ORFget"},{"location":"orfget_run.html#extraction-and-writing-of-orf-sequences-with-orfget","text":"ORFget is a tool provided with ORFmap that allows the user to extract the protein and/or nulceotide sequences of specific subsets of ORFs according to their annotation categories (see here for a description of all ORF categories). ORFget deals with annotation patterns, thereby allowing different levels of annotation in a very easy fashion. ORFget has two principal options: -features_include : list of motifs that will be used to define the ORFs that will be included in the FASTA output. The sequences whose annotations include these patterns will be retained in the output FASTA file -features_exclude : list of motifs that will be used to define the ORFs that will be excluded in the FASTA output. The sequences whose annotations include these patterns will not be written in the output FASTA file The searched patterns can be specific (for a finer selection) or more general. Note For example, the motif \"nc\" appears in the features: nc _intergenic, nc _ovp_same-mRNA, nc _ovp_opp-mRNA and nc _ovp_same-tRNA. As a result, the option -feature_include nc will keep all the four feature categories. The option -feature_include nc_ovp will keep: nc_ovp _same-mRNA nc_ovp _opp-mRNA nc_ovp _same-tRNA The option -feature_include nc_ovp_same will keep: nc_ovp_same -mRNA nc_ovp_same -tRNA The option -feature_include mRNA will keep: nc_ovp_same- mRNA nc_ovp_opp- mRNA The option -feature_exclude opp will eliminate the nc_ovp_ opp -mRNA and will keep: nc_intergenic nc_ovp_same-mRNA nc_ovp_same-tRNA etc... Here are presented some examples of selection of ORFs with ORFget.","title":"Extraction and writing of ORF sequences with ORFget"},{"location":"orfget_run.html#extraction-of-the-sequences-of-all-the-orfs-of-a-gff-file","text":"The following command writes the amino acid sequences of all ORFs annotated in the input GFF file. orfget -fna genome.fasta -gff mapping_orf_genome.gff ORFget generates a FASTA file containing all the corresponding amino acid sequences.","title":"Extraction of the sequences of all the ORFs of a GFF file"},{"location":"orfget_run.html#extraction-of-the-sequences-of-all-noncoding-orfs-identified-with-orfmap","text":"The following commands, each enable the user to write the amino acid sequences of all noncoding ORFs no matter their status (i.e. intergenic or overlapping) (see here for a description of all ORF categories). orfget -fna genome.fasta -gff mapping_orf_genome.gff -features_include nc or orfget -fna genome.fasta -gff mapping_orf_genome.gff -features_include nc_intergenic nc_ovp or orfget -fna genome.fasta -gff mapping_orf_genome.gff -features_exclude c_CDS","title":"Extraction of the sequences of all noncoding ORFs identified with ORFmap"},{"location":"orfget_run.html#extraction-of-the-sequences-of-a-specific-subset-of-orfs-according-to-their-annotation","text":"The following instruction writes the amino acid sequences of the ORFs which overlap with CDS on the same, or on the opposite strand. orfget -fna genome.fasta -gff mapping_orf_genome.gff -features_include nc_ovp_same-CDS nc_ovp_opp-CDS Notice that using the argument \"features_exclude\" assumes that the selection operates on all genomic features except those that are excluded. Consequently, if the user wants to select all noncoding sequences except those overlapping CDS, mRNAs, tRNAs, and rRNAs, he must exclude the coding ORFs (c_CDS) as well. Otherwise, they will be kept. orfget -fna genome.fasta -gff mapping_orf_genome.gff -features_exclude c_CDS nc_same_ovp-tRNA nc_same_ovp-rRNA nc_opp_ovp-mRNA nc_opp_ovp-tRNA nc_opp_ovp-rRNA nc_opp_ovp-mRNA","title":"Extraction of the sequences of a specific subset of ORFs according to their annotation"},{"location":"orfget_run.html#extraction-of-the-sequences-of-a-random-subset-of-orfs","text":"Sometimes, for computational time or storage reasons, the user does not want to deal with all the ORFs of a specific category. ORFget can provide the user with a subset of N (to be defined by the user) randomly selected ORFs from a specific ORF category. The last instruction writes the sequences of 10000 randomly selected noncoding intergenic ORFs. orfget -fna genome.fasta -gff mapping_orf_genome.gff -features_include nc_intergenic -n 10000","title":"Extraction of the sequences of a random subset of ORFs"},{"location":"orfget_run.html#reconstruction-of-protein-sequences","text":"In addition, ORFget enables the reconstruction of all protein sequences of a genome (i.e. all isoforms) according to their definition in the original GFF file. The following instruction writes all the resulting sequences in a FASTA file. orfget -fna genome.fasta -gff genome.gff -features_include CDS","title":"Reconstruction of protein sequences"},{"location":"orfget_run.html#writing-amino-acid-or-nucleotide-sequences","text":"By default, ORFget will generate the amino acid sequences of the desired ORFs in a FASTA file with the extension .pfasta . If the user wishes to generate the nucleotide or even both nucleotide and amino acids sequences, he must use the option -type nucl and -type both , respectively.","title":"Writing amino acid or nucleotide sequences"},{"location":"orfmap_annotation.html","text":"ORF annotation # The ORF annotation relies on the comparison of their localization with those of all the genomic features annotated in the input GFF file (e.g. coding sequences (CDS), tRNA, lncRNA, snoRNA, pseudogenes...). ORFs are subsequently assigned as coding (c_CDS) (if they include in the same frame a CDS) or noncoding (nc). Noncoding ORFs are then subdivided into noncoding intergenic ORFs (nc_intergenic) or noncoding overlapping ORFs (nc_ovp-x with x refering to the overlapping genomic feature) (see here for the definition of an overlap). The former correspond to ORFs which do not overlap any genomic feature. The latter consist of ORFs which overlap a non-phased genomic feature (i.e. non coding) on the same or the opposite strand or which overlap a CDS in another frame. Depending on the localization of the overlapping feature (same or opposite strand), the ORFs are annotated as nc_ovp_same-x or nc_ovp_opp-x respectively. Note Notice that the ORFmap annotation has a particular point of view on the genome which is centered on the identification and annotation of a genome's ORFs rather than the annotation of real biological objets (e.g. tRNA, rRNA or lncRNA for example). ORFmap looks at the genome with a protein perspective where the ORFs of a genome can be seen as its potential for novel peptides or proteins upon the pervasive translation of their corresponding RNAs. Annotation rules # ORF categories # ORFs can be annotated according to four different categories: (1) c_CDS ORFs which include in the same frame a CDS (2) nc_intergenic ORFs which do not overlap any genomic feature (3) nc_ovp_same-x ORFs which overlap on the same strand, a genetic feature no matter its type (4) nc_ovp_opp-x ORFs which overlap on the opposite strand, a genetic feature no matter its type See examples of each type in Figure 1. Figure 1: representation of the six frames of a DNA section. STOP codons are represented with red stars, CDS with orange boxes and the localization of the non-phased genomic features (e.g. tRNA, lncRNA) are represented with green boxes. Note Notice that a noncoding ORF which overlaps a tRNA is not considered as a tRNA and will not be annotated as tRNA, but rather as an ORF that overlaps a tRNA. Indeed a tRNA is a RNA molecule that does not follow the ORF definition (not bounded by STOP codons, whose sequence length is not necessarily a multiple of 3...). Here ORFs are seen as potential peptides or proteins that could be produced upon the pervasive translation of their corresponding RNA. Annotating all ORFs with the genomic feature they overlap enables their analysis in a very flexible fashion. Indeed, the user can adopt different levels of annotation, considering all noncoding ORFs as a whole (i.e. regardless of the fact they overlap a genomic feature or not) or differentiating noncoding ORFs from noncoding ORFs that overlap specific genomic features (e.g. tRNA and rRNA) (see the ORFget section for more details). Priority rules # If a noncoding ORF overlaps multiple genomic features, it will be annotated according to the following priority rules: if the noncoding ORF overlaps a CDS and another annotated feature, the CDS has priority over the other annotated features no matter the CDS is located on the same or the opposite strand. The ORF will be annotated as a noncoding ORF overlapping a CDS (e.g. nc_ovp_(same/opp)-CDS). if the noncoding ORF overlaps an annotated feature on the same strand and another annotated feature on the opposite strand (except CDS), the annotated feature located on the same strand has priority over the other features on the opposite strand. The ORF will be annotated as a noncoding ORF overlapping the feature on the same strand (e.g. nc_ovp_same-x). if the noncoding ORF overlaps multiple annotated features located on the same strand, the feature with the larger overlap with the ORF to be annotated has priority over the other features (e.g. nc_ovp_(same/opp)-x). if the noncoding ORF overlaps multiple features located on the same strand and that cover the same fraction of the ORF to be annotated, the feature which first appears in the GFF file has priority over the others. This case occurs with large annotated features that embed smaller elements. Particular case of genes and exons. Notice that many genomic features overlap together or can be intertwined with each other (e.g. a gene includes one or several mRNAs which in turn include exons and CDS). By default, the features \"gene\" and \"exon\" are not considered. ORFs that match at the same time with the features \"gene\" and \"mRNA\" are annotated as nc_(same/opp)_ovp-mRNA (see Figure 2), while those that match with a CDS and its corresponding exon, will be annotated as c_CDS (i.e. coding ORFs). Finally, noncoding ORFs that overlap in another frame a CDS, and an exon will be annotated as nc_(same/opp)_ovp-CDS. Figure 2: representation of the three frames of a DNA strand section containing a protein coding gene. STOP codons are represented with red stars, the two CDS of the multiexonic gene with orange boxes, while the protein coding gene and its corresponding mRNA are represented with light and dark grey boxes respectively. The two ORFs indicated with brackets do not overlap the CDS of the gene and are subsequently annotated as noncoding. However, they overlap the gene and its corresponding mRNA. As the mRNA has priority over the gene feature, the two ORFs are annotated as noncoding ORF overlapping a mRNA (nc_ovp_same-mRNA).","title":"ORF annotation"},{"location":"orfmap_annotation.html#orf-annotation","text":"The ORF annotation relies on the comparison of their localization with those of all the genomic features annotated in the input GFF file (e.g. coding sequences (CDS), tRNA, lncRNA, snoRNA, pseudogenes...). ORFs are subsequently assigned as coding (c_CDS) (if they include in the same frame a CDS) or noncoding (nc). Noncoding ORFs are then subdivided into noncoding intergenic ORFs (nc_intergenic) or noncoding overlapping ORFs (nc_ovp-x with x refering to the overlapping genomic feature) (see here for the definition of an overlap). The former correspond to ORFs which do not overlap any genomic feature. The latter consist of ORFs which overlap a non-phased genomic feature (i.e. non coding) on the same or the opposite strand or which overlap a CDS in another frame. Depending on the localization of the overlapping feature (same or opposite strand), the ORFs are annotated as nc_ovp_same-x or nc_ovp_opp-x respectively. Note Notice that the ORFmap annotation has a particular point of view on the genome which is centered on the identification and annotation of a genome's ORFs rather than the annotation of real biological objets (e.g. tRNA, rRNA or lncRNA for example). ORFmap looks at the genome with a protein perspective where the ORFs of a genome can be seen as its potential for novel peptides or proteins upon the pervasive translation of their corresponding RNAs.","title":"ORF annotation"},{"location":"orfmap_annotation.html#annotation-rules","text":"","title":"Annotation rules"},{"location":"orfmap_annotation.html#orf-categories","text":"ORFs can be annotated according to four different categories: (1) c_CDS ORFs which include in the same frame a CDS (2) nc_intergenic ORFs which do not overlap any genomic feature (3) nc_ovp_same-x ORFs which overlap on the same strand, a genetic feature no matter its type (4) nc_ovp_opp-x ORFs which overlap on the opposite strand, a genetic feature no matter its type See examples of each type in Figure 1. Figure 1: representation of the six frames of a DNA section. STOP codons are represented with red stars, CDS with orange boxes and the localization of the non-phased genomic features (e.g. tRNA, lncRNA) are represented with green boxes. Note Notice that a noncoding ORF which overlaps a tRNA is not considered as a tRNA and will not be annotated as tRNA, but rather as an ORF that overlaps a tRNA. Indeed a tRNA is a RNA molecule that does not follow the ORF definition (not bounded by STOP codons, whose sequence length is not necessarily a multiple of 3...). Here ORFs are seen as potential peptides or proteins that could be produced upon the pervasive translation of their corresponding RNA. Annotating all ORFs with the genomic feature they overlap enables their analysis in a very flexible fashion. Indeed, the user can adopt different levels of annotation, considering all noncoding ORFs as a whole (i.e. regardless of the fact they overlap a genomic feature or not) or differentiating noncoding ORFs from noncoding ORFs that overlap specific genomic features (e.g. tRNA and rRNA) (see the ORFget section for more details).","title":"ORF categories"},{"location":"orfmap_annotation.html#priority-rules","text":"If a noncoding ORF overlaps multiple genomic features, it will be annotated according to the following priority rules: if the noncoding ORF overlaps a CDS and another annotated feature, the CDS has priority over the other annotated features no matter the CDS is located on the same or the opposite strand. The ORF will be annotated as a noncoding ORF overlapping a CDS (e.g. nc_ovp_(same/opp)-CDS). if the noncoding ORF overlaps an annotated feature on the same strand and another annotated feature on the opposite strand (except CDS), the annotated feature located on the same strand has priority over the other features on the opposite strand. The ORF will be annotated as a noncoding ORF overlapping the feature on the same strand (e.g. nc_ovp_same-x). if the noncoding ORF overlaps multiple annotated features located on the same strand, the feature with the larger overlap with the ORF to be annotated has priority over the other features (e.g. nc_ovp_(same/opp)-x). if the noncoding ORF overlaps multiple features located on the same strand and that cover the same fraction of the ORF to be annotated, the feature which first appears in the GFF file has priority over the others. This case occurs with large annotated features that embed smaller elements. Particular case of genes and exons. Notice that many genomic features overlap together or can be intertwined with each other (e.g. a gene includes one or several mRNAs which in turn include exons and CDS). By default, the features \"gene\" and \"exon\" are not considered. ORFs that match at the same time with the features \"gene\" and \"mRNA\" are annotated as nc_(same/opp)_ovp-mRNA (see Figure 2), while those that match with a CDS and its corresponding exon, will be annotated as c_CDS (i.e. coding ORFs). Finally, noncoding ORFs that overlap in another frame a CDS, and an exon will be annotated as nc_(same/opp)_ovp-CDS. Figure 2: representation of the three frames of a DNA strand section containing a protein coding gene. STOP codons are represented with red stars, the two CDS of the multiexonic gene with orange boxes, while the protein coding gene and its corresponding mRNA are represented with light and dark grey boxes respectively. The two ORFs indicated with brackets do not overlap the CDS of the gene and are subsequently annotated as noncoding. However, they overlap the gene and its corresponding mRNA. As the mRNA has priority over the gene feature, the two ORFs are annotated as noncoding ORF overlapping a mRNA (nc_ovp_same-mRNA).","title":"Priority rules"},{"location":"orfmap_description.html","text":"Aims and general description # ORFMap scans a given genome in the six frames, and searches for all possible ORFs longer than a given size (default: 60 nucleotides - STOP codons excluded). It annotates them according to a set of genomic features (e.g. noncoding intergenic, coding, noncoding and overlapping with a specific genomic feature - see the ORF annotation section for more details). ORFmap takes as inputs a FASTA file containing the nucleotide sequences of all chromosomes or contigs and their corresponding annotations in a GFF file. The program returns a new GFF file that contains all identified ORFs. In addition, the amino acid sequences of all annotated ORFs or specific subsets of ORFs (i.e. only noncoding intergenic ORFs for example) can be extracted and written in a FASTA file with ORFget, a tool provided with ORFmap.","title":"Aims and general description"},{"location":"orfmap_description.html#aims-and-general-description","text":"ORFMap scans a given genome in the six frames, and searches for all possible ORFs longer than a given size (default: 60 nucleotides - STOP codons excluded). It annotates them according to a set of genomic features (e.g. noncoding intergenic, coding, noncoding and overlapping with a specific genomic feature - see the ORF annotation section for more details). ORFmap takes as inputs a FASTA file containing the nucleotide sequences of all chromosomes or contigs and their corresponding annotations in a GFF file. The program returns a new GFF file that contains all identified ORFs. In addition, the amino acid sequences of all annotated ORFs or specific subsets of ORFs (i.e. only noncoding intergenic ORFs for example) can be extracted and written in a FASTA file with ORFget, a tool provided with ORFmap.","title":"Aims and general description"},{"location":"orfmap_input.html","text":"ORFmap inputs # ORFmap takes as inputs: a FASTA file containing the nucleotide sequences of the chromosomes or contigs of a genome the genome annotation in a GFF file (see the GFF3 documentation for more details on the GFF3 format). See an example of inputs in the ORFmine/examples/ directory.","title":"Inputs"},{"location":"orfmap_input.html#orfmap-inputs","text":"ORFmap takes as inputs: a FASTA file containing the nucleotide sequences of the chromosomes or contigs of a genome the genome annotation in a GFF file (see the GFF3 documentation for more details on the GFF3 format). See an example of inputs in the ORFmine/examples/ directory.","title":"ORFmap inputs"},{"location":"orfmap_orf_extraction.html","text":"ORF extraction # The amino acid and nucleotide sequences of all ORFs identified with ORFmap can be extracted easily with ORFget, a tool provided with ORFmap. Particularly, ORFget enables the user to extract the sequences of all identified ORFs (c_CDS, noncoding intergenic, or noncoding overlapping ORFs), but also, those of a specific ORF category (e.g. only noncoding intergenic ORFs) or a combination of ORFs according to their annotations (e.g. noncoding intergenic ORFs and noncoding ORFs that overlap lncRNAs...). Different examples are detailed in the ORFget section .","title":"ORF extraction"},{"location":"orfmap_orf_extraction.html#orf-extraction","text":"The amino acid and nucleotide sequences of all ORFs identified with ORFmap can be extracted easily with ORFget, a tool provided with ORFmap. Particularly, ORFget enables the user to extract the sequences of all identified ORFs (c_CDS, noncoding intergenic, or noncoding overlapping ORFs), but also, those of a specific ORF category (e.g. only noncoding intergenic ORFs) or a combination of ORFs according to their annotations (e.g. noncoding intergenic ORFs and noncoding ORFs that overlap lncRNAs...). Different examples are detailed in the ORFget section .","title":"ORF extraction"},{"location":"orfmap_orfdef.html","text":"ORF defintion # ORFs are defined according to the recent definition proposed by Sieber et al, in 2018. An ORF: has a length divisible by 3 is bounded by stop codons is at least 60 nucleotides long (STOP codons excluded) The minimal length of an ORF can be nevertheless modified by the user with the -orf_len parameter (notice that the ORF length does not include the STOP codons). The following instruction extracts all ORFs of at least 100 amino acids: orfmap -fna genome.fasta -gff genome.gff -orf_len 300","title":"ORF definition"},{"location":"orfmap_orfdef.html#orf-defintion","text":"ORFs are defined according to the recent definition proposed by Sieber et al, in 2018. An ORF: has a length divisible by 3 is bounded by stop codons is at least 60 nucleotides long (STOP codons excluded) The minimal length of an ORF can be nevertheless modified by the user with the -orf_len parameter (notice that the ORF length does not include the STOP codons). The following instruction extracts all ORFs of at least 100 amino acids: orfmap -fna genome.fasta -gff genome.gff -orf_len 300","title":"ORF defintion"},{"location":"orfmap_overlap.html","text":"Overlap definition # Calculation of the overlap: An ORF is considered as overlapping with a given genomic feature if the latter covers at least 70% of the ORF sequence. If less than 70% of an ORF sequence overlaps a genomic feature, but the latter is totally included in the ORF sequence, then the ORF is also considered as overlapping it. Notice that the overlap threshold can be modified with the -co_ovp parameter. With the following instruction, an ORF is annotated as overlapping a given genomic feature if the latter covers at least 90% of the considered ORF. orfmap -fna genome.fasta -gff genome.gff -co_ovp 90","title":"Overlap definition"},{"location":"orfmap_overlap.html#overlap-definition","text":"Calculation of the overlap: An ORF is considered as overlapping with a given genomic feature if the latter covers at least 70% of the ORF sequence. If less than 70% of an ORF sequence overlaps a genomic feature, but the latter is totally included in the ORF sequence, then the ORF is also considered as overlapping it. Notice that the overlap threshold can be modified with the -co_ovp parameter. With the following instruction, an ORF is annotated as overlapping a given genomic feature if the latter covers at least 90% of the considered ORF. orfmap -fna genome.fasta -gff genome.gff -co_ovp 90","title":"Overlap definition"},{"location":"orfmap_param.html","text":"ORFmap parameters # Mandatory -fna nucleotide fasta file of the genome whose ORFs are to annotate -gff GFF annotation file Optional -h, --help shows the help and exits --show-types prints all genomic features annotated in the input GFF file --show-chrs prints all the seqID (usually corresponding to chromosome or contig ID) present in the input GFF file -chr list of seqID to be treated by ORFmap (i.e. column #1 of the GFF file - generally chromosome or contig ID). ID must be separated by a space: -chr NC_001148.4 NC_001139.3 In this case, ORFmap will not treat the entire genome, but the following seqID NC_001148.4 NC_001139.3. We recommend using this option when dealing with large genomes in order to distribute the calculations on several CPUs (one per (subset of) seqID). -orf_len Minimal number of nucleotides between two consecutive STOP codons to define an ORF (default: 60 nucleotides) (see the ORF definition section for more details). -co_ovp Minimal fraction of the ORF length that overlaps a genomic feature to annotate the ORF as overlapping it (default: 70%). (see the Overlap section for more details). -out Output directory -types_only Genomic feature(s) considered for the annotation step ('CDS' is included by default). If there are several genomic features to be considered, they must be given separated by a space. Noncoding ORFs are annotated as intergenic (when they do not overlap any feature) or overlapping (when they overlap a given genomic feature). The \"overlapping\" status directly derives from the genomic features considered for the annotation step. For example, if the user specifies with the \"types_only\" option, the features \"tRNA\" and \"rRNA\" (CDS are included by default), all ORFs that overlap another genomic feature (i.e. different from tRNA, rRNA, or CDS) will be annotated as noncoding intergenic ORFs. If no genomic feature is indicated, noncoding ORFs that overlap any genomic feature annotated in the original GFF file will be annotated as noncoding ORF overlapping the corresponding genomic feature. Nevertheless, the resulting ORFs can be treated specifically (grouped according to their annotation for example) with ORFget afterwards (see the ORFget section for more details). -types_except Genomic feature(s) not to be considered for the annotation step ('gene' and 'exon' not considered by default). If there are several genomic features to be considered, they must be given separated by a space. Noncoding ORFs are annotated as intergenic (when they do not overlap any feature) or overlapping (when they overlap a given genomic feature). The \"overlapping\" status directly derives from the genomic features considered for the annotation step. For example, when specifying with the \"types_except\" option, the features \"telomer\" and \"centromer\" ('gene' and 'exon' not considered by default), if an ORF overlaps a \"telomer\", \"centromer\", \"gene\" and/or \"exon\", the overlap will not be considered and the ORF will be annotated as intergenic or overalapping another genomic feature if there is another genomic feature in the same region (e.g. an ORF that overlaps at the same time a gene and a tRNA will be annotated as overlapping a tRNA since the gene is not considered for the ORF annotation). If no genomic feature is indicated, noncoding ORFs that overlap any genomic feature annotated in the original GFF file will be annotated as noncoding ORF overlapping the corresponding genomic feature. Nevertheless, the resulting ORFs can be treated specifically (grouped according to their annotation for example) with ORFget afterwards (see the ORFget section for more details).","title":"ORFmap parameters"},{"location":"orfmap_param.html#orfmap-parameters","text":"Mandatory -fna nucleotide fasta file of the genome whose ORFs are to annotate -gff GFF annotation file Optional -h, --help shows the help and exits --show-types prints all genomic features annotated in the input GFF file --show-chrs prints all the seqID (usually corresponding to chromosome or contig ID) present in the input GFF file -chr list of seqID to be treated by ORFmap (i.e. column #1 of the GFF file - generally chromosome or contig ID). ID must be separated by a space: -chr NC_001148.4 NC_001139.3 In this case, ORFmap will not treat the entire genome, but the following seqID NC_001148.4 NC_001139.3. We recommend using this option when dealing with large genomes in order to distribute the calculations on several CPUs (one per (subset of) seqID). -orf_len Minimal number of nucleotides between two consecutive STOP codons to define an ORF (default: 60 nucleotides) (see the ORF definition section for more details). -co_ovp Minimal fraction of the ORF length that overlaps a genomic feature to annotate the ORF as overlapping it (default: 70%). (see the Overlap section for more details). -out Output directory -types_only Genomic feature(s) considered for the annotation step ('CDS' is included by default). If there are several genomic features to be considered, they must be given separated by a space. Noncoding ORFs are annotated as intergenic (when they do not overlap any feature) or overlapping (when they overlap a given genomic feature). The \"overlapping\" status directly derives from the genomic features considered for the annotation step. For example, if the user specifies with the \"types_only\" option, the features \"tRNA\" and \"rRNA\" (CDS are included by default), all ORFs that overlap another genomic feature (i.e. different from tRNA, rRNA, or CDS) will be annotated as noncoding intergenic ORFs. If no genomic feature is indicated, noncoding ORFs that overlap any genomic feature annotated in the original GFF file will be annotated as noncoding ORF overlapping the corresponding genomic feature. Nevertheless, the resulting ORFs can be treated specifically (grouped according to their annotation for example) with ORFget afterwards (see the ORFget section for more details). -types_except Genomic feature(s) not to be considered for the annotation step ('gene' and 'exon' not considered by default). If there are several genomic features to be considered, they must be given separated by a space. Noncoding ORFs are annotated as intergenic (when they do not overlap any feature) or overlapping (when they overlap a given genomic feature). The \"overlapping\" status directly derives from the genomic features considered for the annotation step. For example, when specifying with the \"types_except\" option, the features \"telomer\" and \"centromer\" ('gene' and 'exon' not considered by default), if an ORF overlaps a \"telomer\", \"centromer\", \"gene\" and/or \"exon\", the overlap will not be considered and the ORF will be annotated as intergenic or overalapping another genomic feature if there is another genomic feature in the same region (e.g. an ORF that overlaps at the same time a gene and a tRNA will be annotated as overlapping a tRNA since the gene is not considered for the ORF annotation). If no genomic feature is indicated, noncoding ORFs that overlap any genomic feature annotated in the original GFF file will be annotated as noncoding ORF overlapping the corresponding genomic feature. Nevertheless, the resulting ORFs can be treated specifically (grouped according to their annotation for example) with ORFget afterwards (see the ORFget section for more details).","title":"ORFmap parameters"},{"location":"orfmap_run.html","text":"Annotation of ORFs with ORFmap # Running ORFmap on a complete genome # The following instruction annotates all the possible ORFs of the input genome. orfmap -fna genome.fasta -gff genome.gff Depending on the size of the genome, ORFmap takes a few minutes to several hours to annotate all the ORFs of a genome. It returns a new GFF file containing the annotation of all the identified ORFs (including coding and noncoding ORFs). Running ORFmap on a single chromosome or a subset of chromosomes # ORFmap can be launched on a single seqID (usually chromosome or contig indicated in the first column of the inout GFF)(e.g. chromosome seqID: XXX) with the following instruction: orfmap -fna genome.fasta -gff genome.gff -chr chr_ID_XXXX This can be very useful if the user wants to run ORFmap on several CPUs. Also, it can be launched on a subset of seqIDs as follows: orfmap -fna genome.fasta -gff genome.gff -chr seqID1 seqID2 seqIDx","title":"ORF annotation with ORFmap"},{"location":"orfmap_run.html#annotation-of-orfs-with-orfmap","text":"","title":"Annotation of ORFs with ORFmap"},{"location":"orfmap_run.html#running-orfmap-on-a-complete-genome","text":"The following instruction annotates all the possible ORFs of the input genome. orfmap -fna genome.fasta -gff genome.gff Depending on the size of the genome, ORFmap takes a few minutes to several hours to annotate all the ORFs of a genome. It returns a new GFF file containing the annotation of all the identified ORFs (including coding and noncoding ORFs).","title":"Running ORFmap on a complete genome"},{"location":"orfmap_run.html#running-orfmap-on-a-single-chromosome-or-a-subset-of-chromosomes","text":"ORFmap can be launched on a single seqID (usually chromosome or contig indicated in the first column of the inout GFF)(e.g. chromosome seqID: XXX) with the following instruction: orfmap -fna genome.fasta -gff genome.gff -chr chr_ID_XXXX This can be very useful if the user wants to run ORFmap on several CPUs. Also, it can be launched on a subset of seqIDs as follows: orfmap -fna genome.fasta -gff genome.gff -chr seqID1 seqID2 seqIDx","title":"Running ORFmap on a single chromosome or a subset of chromosomes"},{"location":"orfmine_citations.html","text":"How to cite us and others # If you use only ORFmap # please cite: C Papadopoulos, N Chevrollier & A Lopes (unpublished) If you use only ORFfold with HCA, IUPred and Tango # please cite: C Papadopoulos, N Chevrollier & A Lopes (unpublished) Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). OU ??? Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004). Otherwise, if you use ORFold with a combination of HCA, IUPred and Tango # please cite: C Papadopoulos, N Chevrollier & A Lopes (unpublished) and the publications corresponding to your calculations: for HCA, cite: Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). for IUPred, cite: Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). OU ??? Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). for Tango, cite: Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004).","title":"Citations"},{"location":"orfmine_citations.html#how-to-cite-us-and-others","text":"","title":"How to cite us and others"},{"location":"orfmine_citations.html#if-you-use-only-orfmap","text":"please cite: C Papadopoulos, N Chevrollier & A Lopes (unpublished)","title":"If you use only ORFmap"},{"location":"orfmine_citations.html#if-you-use-only-orffold-with-hca-iupred-and-tango","text":"please cite: C Papadopoulos, N Chevrollier & A Lopes (unpublished) Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). OU ??? Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004).","title":"If you use only ORFfold with HCA, IUPred and Tango"},{"location":"orfmine_citations.html#otherwise-if-you-use-orfold-with-a-combination-of-hca-iupred-and-tango","text":"please cite: C Papadopoulos, N Chevrollier & A Lopes (unpublished) and the publications corresponding to your calculations: for HCA, cite: Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). for IUPred, cite: Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). OU ??? Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). for Tango, cite: Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004).","title":"Otherwise, if you use ORFold with a combination of HCA, IUPred and Tango"},{"location":"orfmine_installation.html","text":"Installation # 1. Overview # ORFmine is a package that consists of two independent tools ORFmap and ORFold. Both these tools have been developed in python3 (version >= 3.6). The install.sh script will install both ORFmap and ORFold with their dependancies. They can be used together or independently. 2. Download and uncompress the latest release archive # Download the latest release # Here: or simply clone our github repository called ORFmine Uncompress the archive # If you downloaded: the .zip file: unzip orfmine-x.x.x.zip the .tar.gz file: tar xzvf orfmine-x.x.x.tar.gz 3. Create an isolated environment # Although not strictly necessary, this step is highly recommended (it will allow you to work on different projects without having any conflicting library versions). If you do not want to create a virtual environment, please go directly to the install section . Install virtualenv # python3 -m pip install virtualenv Create a virtual environment # virtualenv -p python3 orfmine_env Activate the created environment # source orfmine_env/bin/activate Once activated, any python library you will install using pip will be installed solely in this isolated environment. You must activate this environment any time you need libraries installed in this environment. Once you are done working on your project, simply type deactivate to exit the environment. Note To delete definitively your virtual environment, you can simply remove the directory with the following instruction: rm -r my_env/ Note We remind to the user that some external packages used in ORFmine (such as Biopython) require python version >= 3.6. Before creating your virtual environment make sure that your python version is up-to-date. 4. Install ORFMine # Preparation before the Installation # If you just want to use ORFmap in order to annotate all the possible ORFs of a genome, you have no other dependencies to install, and you simply have to Launch the Installation presented below . The installation of ORFold becomes a bit more demanding as there are some external tools to be downloaded and/or installed before launching the installation. Firstly, ORFold is based on the HCA method for the calculation of the fold potential. As a result pyHCA [ 1 ] is essential to be pre-installed in your machine before installing ORFold . You can download for free and install pyHCA using the instructions of the developers. If you are not interested in the calculation of the disorder and/or aggregation propensities with ORFold and you already have installed pyHCA, you can simply launch the installation presented below . However, in the case you want to use IUPred [2][3][4] and/or Tango [5][6][7] with ORFold you have to first contact their developers through the respective links and have access to their programs. These two softwares are not freely available for non-academic users. Once you have access to the IUPred and Tango you have to place them in a directory called softwares placed in the path: ORFmine/orfold_v1/orfold/ . To do so: First create the softwares directory if not already created: mkdir ORFmine/orfold_v1/orfold/softwares Move the IUPred source code and data (provided by the developer): mv iupred2a.py ORFmine/orfold_v1/orfold/softwares mv data ORFmine/orfold_v1/orfold/softwares Move Tango source code: For MacOS: mv tango2_3_1 ORFmine/orfold_v1/orfold/softwares For linux: mv tango_x86_64_release ORFmine/orfold_v1/orfold/softwares For windows: mv Tango.exe ORFmine/orfold_v1/orfold/softwares Note The calculation of the disorder or aggregation propensities are both optional and complementary to the HCA score. As a result, IUPred and Tango tools are not mandatory for the installation of ORFold. In addition, they are not necessarily coupled together. ORFold will properly be installed without them or even with only one of them. Installation # If you use a virtual environment, be sure that your virtual environment is activated. Then, in any case, follow the procedure described below: cd ORFmine chmod u+x install.sh ./install.sh This script will first uninstall ORFmine if it was already installed and will re-install it. In addition, it will install all the dependency packages needed for ORFmap and ORFold. References # Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Dosztanyi, Z., Csizmok, V., Tompa, P. & Simon, I. The pairwise energy content estimated from amino acid composition discriminates between folded and intrinsically unstructured proteins. Journal of molecular biology 347, 827\u2013839 (2005). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Fernandez-Escamilla, A.-M., Rousseau, F., Schymkowitz, J. & Serrano, L. Prediction of sequence-dependent and mutational effects on the aggregation of peptides and proteins. Nature biotechnology 22, 1302\u20131306 (2004). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004). Rousseau, F., Schymkowitz, J. & Serrano, L. Protein aggregation and amyloidosis: confusion of the kinds? Current opinion in structural biology 16, 118\u2013126 (2006).","title":"Installation"},{"location":"orfmine_installation.html#installation","text":"","title":"Installation"},{"location":"orfmine_installation.html#1-overview","text":"ORFmine is a package that consists of two independent tools ORFmap and ORFold. Both these tools have been developed in python3 (version >= 3.6). The install.sh script will install both ORFmap and ORFold with their dependancies. They can be used together or independently.","title":"1. Overview"},{"location":"orfmine_installation.html#2-download-and-uncompress-the-latest-release-archive","text":"","title":"2. Download and uncompress the latest release archive"},{"location":"orfmine_installation.html#download-the-latest-release","text":"Here: or simply clone our github repository called ORFmine","title":"Download the latest release"},{"location":"orfmine_installation.html#uncompress-the-archive","text":"If you downloaded: the .zip file: unzip orfmine-x.x.x.zip the .tar.gz file: tar xzvf orfmine-x.x.x.tar.gz","title":"Uncompress the archive"},{"location":"orfmine_installation.html#3-create-an-isolated-environment","text":"Although not strictly necessary, this step is highly recommended (it will allow you to work on different projects without having any conflicting library versions). If you do not want to create a virtual environment, please go directly to the install section .","title":"3. Create an isolated environment"},{"location":"orfmine_installation.html#install-virtualenv","text":"python3 -m pip install virtualenv","title":"Install virtualenv"},{"location":"orfmine_installation.html#create-a-virtual-environment","text":"virtualenv -p python3 orfmine_env","title":"Create a virtual environment"},{"location":"orfmine_installation.html#activate-the-created-environment","text":"source orfmine_env/bin/activate Once activated, any python library you will install using pip will be installed solely in this isolated environment. You must activate this environment any time you need libraries installed in this environment. Once you are done working on your project, simply type deactivate to exit the environment. Note To delete definitively your virtual environment, you can simply remove the directory with the following instruction: rm -r my_env/ Note We remind to the user that some external packages used in ORFmine (such as Biopython) require python version >= 3.6. Before creating your virtual environment make sure that your python version is up-to-date.","title":"Activate the created environment"},{"location":"orfmine_installation.html#4-install-orfmine","text":"","title":"4. Install ORFMine"},{"location":"orfmine_installation.html#preparation-before-the-installation","text":"If you just want to use ORFmap in order to annotate all the possible ORFs of a genome, you have no other dependencies to install, and you simply have to Launch the Installation presented below . The installation of ORFold becomes a bit more demanding as there are some external tools to be downloaded and/or installed before launching the installation. Firstly, ORFold is based on the HCA method for the calculation of the fold potential. As a result pyHCA [ 1 ] is essential to be pre-installed in your machine before installing ORFold . You can download for free and install pyHCA using the instructions of the developers. If you are not interested in the calculation of the disorder and/or aggregation propensities with ORFold and you already have installed pyHCA, you can simply launch the installation presented below . However, in the case you want to use IUPred [2][3][4] and/or Tango [5][6][7] with ORFold you have to first contact their developers through the respective links and have access to their programs. These two softwares are not freely available for non-academic users. Once you have access to the IUPred and Tango you have to place them in a directory called softwares placed in the path: ORFmine/orfold_v1/orfold/ . To do so: First create the softwares directory if not already created: mkdir ORFmine/orfold_v1/orfold/softwares Move the IUPred source code and data (provided by the developer): mv iupred2a.py ORFmine/orfold_v1/orfold/softwares mv data ORFmine/orfold_v1/orfold/softwares Move Tango source code: For MacOS: mv tango2_3_1 ORFmine/orfold_v1/orfold/softwares For linux: mv tango_x86_64_release ORFmine/orfold_v1/orfold/softwares For windows: mv Tango.exe ORFmine/orfold_v1/orfold/softwares Note The calculation of the disorder or aggregation propensities are both optional and complementary to the HCA score. As a result, IUPred and Tango tools are not mandatory for the installation of ORFold. In addition, they are not necessarily coupled together. ORFold will properly be installed without them or even with only one of them.","title":"Preparation before the Installation"},{"location":"orfmine_installation.html#installation_1","text":"If you use a virtual environment, be sure that your virtual environment is activated. Then, in any case, follow the procedure described below: cd ORFmine chmod u+x install.sh ./install.sh This script will first uninstall ORFmine if it was already installed and will re-install it. In addition, it will install all the dependency packages needed for ORFmap and ORFold.","title":"Installation"},{"location":"orfmine_installation.html#references","text":"Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Dosztanyi, Z., Csizmok, V., Tompa, P. & Simon, I. The pairwise energy content estimated from amino acid composition discriminates between folded and intrinsically unstructured proteins. Journal of molecular biology 347, 827\u2013839 (2005). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Fernandez-Escamilla, A.-M., Rousseau, F., Schymkowitz, J. & Serrano, L. Prediction of sequence-dependent and mutational effects on the aggregation of peptides and proteins. Nature biotechnology 22, 1302\u20131306 (2004). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004). Rousseau, F., Schymkowitz, J. & Serrano, L. Protein aggregation and amyloidosis: confusion of the kinds? Current opinion in structural biology 16, 118\u2013126 (2006).","title":"References"},{"location":"orfmine_overview.html","text":"Overview of ORFmine # Recent studies attribute a new role to the noncoding genome in the production of novel peptides. The widespread transcription of noncoding regions and the pervasive translation of the resulting RNAs offer a vast reservoir of novel peptides to the organisms. ORFmine is an open-source package that aims at extracting, annotating, and characterizing the fold potential and the structural properties of all Open Reading Frames (ORF) encoded in a genome (including coding and noncoding sequences). ORFmine consists of two independent programs, ORFmap and ORFold that can be used together or independently (see here for an example of application). ORFMap searches for all possible ORFs longer than 60 nucleotides in the six frames of an input genome, and annotate them according to a set of genomic features (e.g. noncoding intergenic ORFs, coding ORFs, noncoding ORFs that overlap with a specific genomic feature...). It provides the user with a GFF file containing the annotations of all identified ORFs that can be directly uploaded on a genome viewer for a visual inspection. In addition, their amino acid and/or nucleotide sequences can be extracted in a FASTA file (for more details, see the complete documentation of ORFmap). ORFold probes the fold potential and the disorder and aggregation propensities of a set of amino acid sequences (all ORFs annotated by ORFmap for example). The fold potential is estimated with the HCA method [1], while the disorder and aggregation propensities are calculated with IUPRred[2][3][4], and TANGO[5][6][7] respectively. The specificity of ORFold lies in the fact that the user can provide the amino acid sequences along with their corresponding annotations in a GFF file. In this case, ORFold produces new GFF files, each containing for each annotated sequence, their fold potential, disorder and aggregation propensities respectively, thereby enabling the manual inspection of these properties along a genome in a genome viewer (for more details, see the complete documentation of ORFold). References # Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Dosztanyi, Z., Csizmok, V., Tompa, P. & Simon, I. The pairwise energy content estimated from amino acid composition discriminates between folded and intrinsically unstructured proteins. Journal of molecular biology 347, 827\u2013839 (2005). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Fernandez-Escamilla, A.-M., Rousseau, F., Schymkowitz, J. & Serrano, L. Prediction of sequence-dependent and mutational effects on the aggregation of peptides and proteins. Nature biotechnology 22, 1302\u20131306 (2004). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004). Rousseau, F., Schymkowitz, J. & Serrano, L. Protein aggregation and amyloidosis: confusion of the kinds? Current opinion in structural biology 16, 118\u2013126 (2006).","title":"Orfmine overview"},{"location":"orfmine_overview.html#overview-of-orfmine","text":"Recent studies attribute a new role to the noncoding genome in the production of novel peptides. The widespread transcription of noncoding regions and the pervasive translation of the resulting RNAs offer a vast reservoir of novel peptides to the organisms. ORFmine is an open-source package that aims at extracting, annotating, and characterizing the fold potential and the structural properties of all Open Reading Frames (ORF) encoded in a genome (including coding and noncoding sequences). ORFmine consists of two independent programs, ORFmap and ORFold that can be used together or independently (see here for an example of application). ORFMap searches for all possible ORFs longer than 60 nucleotides in the six frames of an input genome, and annotate them according to a set of genomic features (e.g. noncoding intergenic ORFs, coding ORFs, noncoding ORFs that overlap with a specific genomic feature...). It provides the user with a GFF file containing the annotations of all identified ORFs that can be directly uploaded on a genome viewer for a visual inspection. In addition, their amino acid and/or nucleotide sequences can be extracted in a FASTA file (for more details, see the complete documentation of ORFmap). ORFold probes the fold potential and the disorder and aggregation propensities of a set of amino acid sequences (all ORFs annotated by ORFmap for example). The fold potential is estimated with the HCA method [1], while the disorder and aggregation propensities are calculated with IUPRred[2][3][4], and TANGO[5][6][7] respectively. The specificity of ORFold lies in the fact that the user can provide the amino acid sequences along with their corresponding annotations in a GFF file. In this case, ORFold produces new GFF files, each containing for each annotated sequence, their fold potential, disorder and aggregation propensities respectively, thereby enabling the manual inspection of these properties along a genome in a genome viewer (for more details, see the complete documentation of ORFold).","title":"Overview of ORFmine"},{"location":"orfmine_overview.html#references","text":"Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Dosztanyi, Z., Csizmok, V., Tompa, P. & Simon, I. The pairwise energy content estimated from amino acid composition discriminates between folded and intrinsically unstructured proteins. Journal of molecular biology 347, 827\u2013839 (2005). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Fernandez-Escamilla, A.-M., Rousseau, F., Schymkowitz, J. & Serrano, L. Prediction of sequence-dependent and mutational effects on the aggregation of peptides and proteins. Nature biotechnology 22, 1302\u20131306 (2004). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004). Rousseau, F., Schymkowitz, J. & Serrano, L. Protein aggregation and amyloidosis: confusion of the kinds? Current opinion in structural biology 16, 118\u2013126 (2006).","title":"References"},{"location":"orfmine_quickstart.html","text":"Usage # Here is presented an example of the use of ORFmap with ORFold to annotate all the ORFs of a genome, and to characterize their fold potential and disorder and aggregation propensities. The inputs used in this example and the resulting outputs are available in the ORFmine/examples/ folder. Annotation and extraction of ORFs with ORfmap # Annotation of ORFs # ORFmap takes as input (i) a FASTA file containing the nucleotide sequences of all chromosomes or contigs, and (ii) their corresponding annotations in a GFF file (see the GFF3 documentation for more details on the GFF3 format). The following command runs ORFmap on the complete genome of Escherichia coli ( E. coli ) available in the \"examples\" folder: orfmap -fna E_coli.fna -gff E_coli.gff ORFmap generates a novel GFF file (available in ORFmine/examples/outputs/mapping_orf_E_coli.gff) containing the annotations of all identified ORFs. Extraction of noncoding ORFs in a FASTA file # The amino acid sequences of all annotated ORFs or specific subsets of ORFs (i.e. only noncoding intergenic ORFs for example) can be extracted and written in a FASTA file with ORFget, a tool provided with ORFmap. The following instruction writes the amino acid sequences of all noncoding ORFs (including noncoding intergenic ORFs and those that overlap with a genomic feature) of E. coli in a FASTA file. orfget -fna E_coli.fna -gff mapping_orf_E_coli.gff -features_include nc -o E_coli_noncoding ORFget produces a FASTA file (E_coli_noncoding.pfasta) containing the amino acid sequences of all noncoding ORFs annotated by ORFmap (see here for more examples on the use of ORFget). Extraction of protein sequences of E. coli in a FASTA file # In addition, ORFget enables the reconstruction of all protein sequences of E. coli according to their definition in the original GFF file. orfget -fna E_coli.fna -gff E_coli.gff -features_include CDS -o E_coli_CDS Characterization of the fold potential and disorder and aggregation propensities of the noncoding ORFs with ORFold # Running ORFold # ORFold only needs a FASTA file containing the amino acid sequences to characterize. That said, a GFF file containing the annotation of the input sequences can be provided as well. In the latter case, ORFold writes the fold potential and disorder and aggregation propensities in three GFF files respectively. The latter can be subsequently uploaded on a genome viewer for a visual inspection of the distribution of these properties along the genome. The following instruction enables the user to probe the fold potential and disorder and aggregation propensities of all noncoding ORFs annotated by ORFmap along with those of the protein sequences of E. coli . The GFF file generated by ORFmap is given as well in order to manually inspect with a genome viewer, the distribution of the structural properties of the noncoding ORFs along the genome of E. coli . orfold -fna E_coli_noncoding.pfasta E_coli_CDS.pfasta -options HIT -gff mapping_orf_E_coli.gff E_coli.gff ORFold provides two tables (one per dataset) available in ORFmine/examples/outputs/. Each table contains for each input sequence, the fold potential, disorder and aggregation propensities based on HCA [1], IUPred [2][3][4] and TANGO [5][6][7], respectively (see here for more details on the calculation of these scores). ORFold also generates three new GFF files containing for each ORF present at the same time in the input FASTA and GFF files, its fold potential and disorder and aggregation propensities respectively. The output GFF files can be subsequently uploaded on a genome viewer. Visualization of the distribution of the fold potential with ORFplot # ORFplot enables the visualization of the distribution of the fold potential of the noncoding ORFs and protein sequences along with the one of a reference dataset of globular proteins taken from M\u00e9sz\u00e1ros et al.[8]. orfplot -tab E_coli_CDS.tab E_coli_noncoding.tab -names \"E. coli coding\" \"E. coli noncoding\" The output graphic is generated in PNG and PDF formats (see here for other examples of use of ORFplot). Each distribution is compared with the one of the globular protein dataset with a Kolmogorov Smirnov test. Asterisks on the plot denote level of significance: * < 0.05, * * < 0.01, *** < 0.001. Note This section implies that IUPred and Tango have been downloaded and that their paths have been correctly defined during the installation procedure. References # Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Dosztanyi, Z., Csizmok, V., Tompa, P. & Simon, I. The pairwise energy content estimated from amino acid composition discriminates between folded and intrinsically unstructured proteins. Journal of molecular biology 347, 827\u2013839 (2005). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Fernandez-Escamilla, A.-M., Rousseau, F., Schymkowitz, J. & Serrano, L. Prediction of sequence-dependent and mutational effects on the aggregation of peptides and proteins. Nature biotechnology 22, 1302\u20131306 (2004). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004). Rousseau, F., Schymkowitz, J. & Serrano, L. Protein aggregation and amyloidosis: confusion of the kinds? Current opinion in structural biology 16, 118\u2013126 (2006). M\u00e9sz\u00e1ros B, Erd\u0151s G, Doszt\u00e1nyi Z (2018) IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46:W329\u2013W337","title":"Quick start"},{"location":"orfmine_quickstart.html#usage","text":"Here is presented an example of the use of ORFmap with ORFold to annotate all the ORFs of a genome, and to characterize their fold potential and disorder and aggregation propensities. The inputs used in this example and the resulting outputs are available in the ORFmine/examples/ folder.","title":"Usage"},{"location":"orfmine_quickstart.html#annotation-and-extraction-of-orfs-with-orfmap","text":"","title":"Annotation and extraction of ORFs with ORfmap"},{"location":"orfmine_quickstart.html#annotation-of-orfs","text":"ORFmap takes as input (i) a FASTA file containing the nucleotide sequences of all chromosomes or contigs, and (ii) their corresponding annotations in a GFF file (see the GFF3 documentation for more details on the GFF3 format). The following command runs ORFmap on the complete genome of Escherichia coli ( E. coli ) available in the \"examples\" folder: orfmap -fna E_coli.fna -gff E_coli.gff ORFmap generates a novel GFF file (available in ORFmine/examples/outputs/mapping_orf_E_coli.gff) containing the annotations of all identified ORFs.","title":"Annotation of ORFs"},{"location":"orfmine_quickstart.html#extraction-of-noncoding-orfs-in-a-fasta-file","text":"The amino acid sequences of all annotated ORFs or specific subsets of ORFs (i.e. only noncoding intergenic ORFs for example) can be extracted and written in a FASTA file with ORFget, a tool provided with ORFmap. The following instruction writes the amino acid sequences of all noncoding ORFs (including noncoding intergenic ORFs and those that overlap with a genomic feature) of E. coli in a FASTA file. orfget -fna E_coli.fna -gff mapping_orf_E_coli.gff -features_include nc -o E_coli_noncoding ORFget produces a FASTA file (E_coli_noncoding.pfasta) containing the amino acid sequences of all noncoding ORFs annotated by ORFmap (see here for more examples on the use of ORFget).","title":"Extraction of noncoding ORFs in a FASTA file"},{"location":"orfmine_quickstart.html#extraction-of-protein-sequences-of-e-coli-in-a-fasta-file","text":"In addition, ORFget enables the reconstruction of all protein sequences of E. coli according to their definition in the original GFF file. orfget -fna E_coli.fna -gff E_coli.gff -features_include CDS -o E_coli_CDS","title":"Extraction of protein sequences of E. coli in a FASTA file"},{"location":"orfmine_quickstart.html#characterization-of-the-fold-potential-and-disorder-and-aggregation-propensities-of-the-noncoding-orfs-with-orfold","text":"","title":"Characterization of the fold potential and disorder and aggregation propensities of the noncoding ORFs with ORFold"},{"location":"orfmine_quickstart.html#running-orfold","text":"ORFold only needs a FASTA file containing the amino acid sequences to characterize. That said, a GFF file containing the annotation of the input sequences can be provided as well. In the latter case, ORFold writes the fold potential and disorder and aggregation propensities in three GFF files respectively. The latter can be subsequently uploaded on a genome viewer for a visual inspection of the distribution of these properties along the genome. The following instruction enables the user to probe the fold potential and disorder and aggregation propensities of all noncoding ORFs annotated by ORFmap along with those of the protein sequences of E. coli . The GFF file generated by ORFmap is given as well in order to manually inspect with a genome viewer, the distribution of the structural properties of the noncoding ORFs along the genome of E. coli . orfold -fna E_coli_noncoding.pfasta E_coli_CDS.pfasta -options HIT -gff mapping_orf_E_coli.gff E_coli.gff ORFold provides two tables (one per dataset) available in ORFmine/examples/outputs/. Each table contains for each input sequence, the fold potential, disorder and aggregation propensities based on HCA [1], IUPred [2][3][4] and TANGO [5][6][7], respectively (see here for more details on the calculation of these scores). ORFold also generates three new GFF files containing for each ORF present at the same time in the input FASTA and GFF files, its fold potential and disorder and aggregation propensities respectively. The output GFF files can be subsequently uploaded on a genome viewer.","title":"Running ORFold"},{"location":"orfmine_quickstart.html#visualization-of-the-distribution-of-the-fold-potential-with-orfplot","text":"ORFplot enables the visualization of the distribution of the fold potential of the noncoding ORFs and protein sequences along with the one of a reference dataset of globular proteins taken from M\u00e9sz\u00e1ros et al.[8]. orfplot -tab E_coli_CDS.tab E_coli_noncoding.tab -names \"E. coli coding\" \"E. coli noncoding\" The output graphic is generated in PNG and PDF formats (see here for other examples of use of ORFplot). Each distribution is compared with the one of the globular protein dataset with a Kolmogorov Smirnov test. Asterisks on the plot denote level of significance: * < 0.05, * * < 0.01, *** < 0.001. Note This section implies that IUPred and Tango have been downloaded and that their paths have been correctly defined during the installation procedure.","title":"Visualization of the distribution of the fold potential with ORFplot"},{"location":"orfmine_quickstart.html#references","text":"Bitard-Feildel, T. & Callebaut, I. HCAtk and pyHCA: A Toolkit and Python API for the Hydrophobic Cluster Analysis of Protein Sequences. bioRxiv 249995 (2018). Dosztanyi, Z., Csizmok, V., Tompa, P. & Simon, I. The pairwise energy content estimated from amino acid composition discriminates between folded and intrinsically unstructured proteins. Journal of molecular biology 347, 827\u2013839 (2005). Doszta\u0301nyi, Z. Prediction of protein disorder based on IUPred. Protein Science 27, 331\u2013 340 (2018). Me\u0301sza\u0301ros, B., Erdo\u030bs, G. & Doszta\u0301nyi, Z. IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46, W329\u2013W337 (2018). Fernandez-Escamilla, A.-M., Rousseau, F., Schymkowitz, J. & Serrano, L. Prediction of sequence-dependent and mutational effects on the aggregation of peptides and proteins. Nature biotechnology 22, 1302\u20131306 (2004). Linding, R., Schymkowitz, J., Rousseau, F., Diella, F. & Serrano, L. A comparative study of the relationship between protein structure and \u03b2-aggregation in globular and intrinsically disordered proteins. Journal of molecular biology 342, 345\u2013353 (2004). Rousseau, F., Schymkowitz, J. & Serrano, L. Protein aggregation and amyloidosis: confusion of the kinds? Current opinion in structural biology 16, 118\u2013126 (2006). M\u00e9sz\u00e1ros B, Erd\u0151s G, Doszt\u00e1nyi Z (2018) IUPred2A: context-dependent prediction of protein disorder as a function of redox state and protein binding. Nucleic acids research 46:W329\u2013W337","title":"References"},{"location":"parameters_orfold.html","text":"ORFfold parameters # Mandatory -fna FASTA file containing the amino acid sequences to treat -options indicates which properties are to be calculated. H for estimating the fold potential with HCA, I for the estimation of the disorder propensity with IUPred and T for the aggregation propensity with Tango. Combinations of letters are accepted if the user wants to calculate several properties at the same time (-options HIT will estimate the three properties)(default: H). Optional -h, --help shows this help message and exits -gff GFF annotation file. The ID (i.e. annotation) of the sequences given in the input FASTA file sequence must be identical to the ID label in the GFF file (column #3). ORFold generates as many GFF files as studied properties (fold potential, disorder and/or aggregation propensities), each containing for the sequences provided in the input FASTA file, their corresponding property values (fold potential, disorder or aggregation propensities). The values are stored in the column #9 of the output GFF files that can be subsequently uploaded on a genome viewer (see here examples on the use of this option). -keep ORFold uses IUPred and Tango for the prediction of the disorder and aggregation propensities. For storage reasons, by default, ORFold does not save the output files of these two methods. Nevertheless, the user can keep the Tango output files through the option -keep . -keep T will save Tango output files in the TANGO directory. -N Working with large genomes can eventually generate quite big files. For that reason, ORFold has also the option to generate a sample of the initial dataset and perform the calculation only on this specific subset of the population. This option enables the user to indicate the number of randomly selected sequences to be treated by ORFold.","title":"ORFold parameters"},{"location":"parameters_orfold.html#orffold-parameters","text":"Mandatory -fna FASTA file containing the amino acid sequences to treat -options indicates which properties are to be calculated. H for estimating the fold potential with HCA, I for the estimation of the disorder propensity with IUPred and T for the aggregation propensity with Tango. Combinations of letters are accepted if the user wants to calculate several properties at the same time (-options HIT will estimate the three properties)(default: H). Optional -h, --help shows this help message and exits -gff GFF annotation file. The ID (i.e. annotation) of the sequences given in the input FASTA file sequence must be identical to the ID label in the GFF file (column #3). ORFold generates as many GFF files as studied properties (fold potential, disorder and/or aggregation propensities), each containing for the sequences provided in the input FASTA file, their corresponding property values (fold potential, disorder or aggregation propensities). The values are stored in the column #9 of the output GFF files that can be subsequently uploaded on a genome viewer (see here examples on the use of this option). -keep ORFold uses IUPred and Tango for the prediction of the disorder and aggregation propensities. For storage reasons, by default, ORFold does not save the output files of these two methods. Nevertheless, the user can keep the Tango output files through the option -keep . -keep T will save Tango output files in the TANGO directory. -N Working with large genomes can eventually generate quite big files. For that reason, ORFold has also the option to generate a sample of the initial dataset and perform the calculation only on this specific subset of the population. This option enables the user to indicate the number of randomly selected sequences to be treated by ORFold.","title":"ORFfold parameters"},{"location":"parameters_orfplot.html","text":"ORFplot parameters # Mandatory -tab one or several tables produced by ORFold containing the fold potential of each table entry. For each given table, ORFplot plots the distribution of the fold potential of all the table entries. ORFplot will plot as many distributions as given tables. Optional -h, --help shows this help message and exits -names names of each input dataset to write in the legend. If the names consist of several words, please indicate them enclosed in double quotes, -names \"Noncoding sequences (all)\" \"Noncoding sequences translated in condition X\"","title":"ORFplot parameters"},{"location":"parameters_orfplot.html#orfplot-parameters","text":"Mandatory -tab one or several tables produced by ORFold containing the fold potential of each table entry. For each given table, ORFplot plots the distribution of the fold potential of all the table entries. ORFplot will plot as many distributions as given tables. Optional -h, --help shows this help message and exits -names names of each input dataset to write in the legend. If the names consist of several words, please indicate them enclosed in double quotes, -names \"Noncoding sequences (all)\" \"Noncoding sequences translated in condition X\"","title":"ORFplot parameters"},{"location":"virtualenv.html","text":"Virtual environment #","title":"Virtualenv"},{"location":"virtualenv.html#virtual-environment","text":"","title":"Virtual environment"}]}